//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace BillingSystem.Service
{
  using System = global::System;

  [System.CodeDom.Compiler.GeneratedCode( "NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class Client
  {
    private string _baseUrl = "https://billingportalapis.azurewebsites.net/";
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

    public Client( string baseUrl, System.Net.Http.HttpClient httpClient )
    {
      BaseUrl = baseUrl;
      _httpClient = httpClient;
      _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>( CreateSerializerSettings );
    }

    private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
    {
      var settings = new System.Text.Json.JsonSerializerOptions();
      UpdateJsonSerializerSettings( settings );
      return settings;
    }

    public string BaseUrl
    {
      get { return _baseUrl; }
      set { _baseUrl = value; }
    }

    protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings( System.Text.Json.JsonSerializerOptions settings );

    partial void PrepareRequest( System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url );
    partial void PrepareRequest( System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder );
    partial void ProcessResponse( System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response );

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<Admin> GetAdminProfileAsync( int id )
    {
      return GetAdminProfileAsync( id, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<Admin> GetAdminProfileAsync( int id, System.Threading.CancellationToken cancellationToken )
    {
      if( id == null )
        throw new System.ArgumentNullException( "id" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Admin/GetAdminProfile/{id}" );
      urlBuilder_.Replace( "{id}", System.Uri.EscapeDataString( ConvertToString( id, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<Admin>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Admin>> GetAllAdminUserAsync()
    {
      return GetAllAdminUserAsync( System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Admin>> GetAllAdminUserAsync( System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Admin/GetAllAdminUser" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Admin>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<AdminPermission> GetAdminPermissionsAsync( int adminId )
    {
      return GetAdminPermissionsAsync( adminId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<AdminPermission> GetAdminPermissionsAsync( int adminId, System.Threading.CancellationToken cancellationToken )
    {
      if( adminId == null )
        throw new System.ArgumentNullException( "adminId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Admin/GetAdminPermissions/{adminId}" );
      urlBuilder_.Replace( "{adminId}", System.Uri.EscapeDataString( ConvertToString( adminId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<AdminPermission>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> SaveAdminPermissionsAsync( AdminPermission body )
    {
      return SaveAdminPermissionsAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> SaveAdminPermissionsAsync( AdminPermission body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Admin/SaveAdminPermissions" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Region>> GetAllRegionsAsync()
    {
      return GetAllRegionsAsync( System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Region>> GetAllRegionsAsync( System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Admin/GetAllRegions" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Region>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AdminRegion>> GetAdminRegionsByAdminIdAsync( int adminId )
    {
      return GetAdminRegionsByAdminIdAsync( adminId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AdminRegion>> GetAdminRegionsByAdminIdAsync( int adminId, System.Threading.CancellationToken cancellationToken )
    {
      if( adminId == null )
        throw new System.ArgumentNullException( "adminId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Admin/GetAdminRegionsByAdminId/{adminId}" );
      urlBuilder_.Replace( "{adminId}", System.Uri.EscapeDataString( ConvertToString( adminId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AdminRegion>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> SetAdminUserStatusAsync( int? adminId, string status )
    {
      return SetAdminUserStatusAsync( adminId, status, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> SetAdminUserStatusAsync( int? adminId, string status, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Admin/SetAdminUserStatus?" );
      if( adminId != null )
      {
        urlBuilder_.Append( System.Uri.EscapeDataString( "adminId" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( adminId, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
      }
      if( status != null )
      {
        urlBuilder_.Append( System.Uri.EscapeDataString( "status" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( status, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Content = new System.Net.Http.StringContent( string.Empty, System.Text.Encoding.UTF8, "text/plain" );
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<Customer> LoginAsync( string email, string password )
    {
      return LoginAsync( email, password, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<Customer> LoginAsync( string email, string password, System.Threading.CancellationToken cancellationToken )
    {
      if( email == null )
        throw new System.ArgumentNullException( "email" );

      if( password == null )
        throw new System.ArgumentNullException( "password" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Authentication/Login/{email}/{password}" );
      urlBuilder_.Replace( "{email}", System.Uri.EscapeDataString( ConvertToString( email, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{password}", System.Uri.EscapeDataString( ConvertToString( password, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<Customer>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> RegisterAsync( RegisterDTO body )
    {
      return RegisterAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> RegisterAsync( RegisterDTO body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Authentication/Register" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> ForgetPasswordCustomerAsync( string email )
    {
      return ForgetPasswordCustomerAsync( email, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> ForgetPasswordCustomerAsync( string email, System.Threading.CancellationToken cancellationToken )
    {
      if( email == null )
        throw new System.ArgumentNullException( "email" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Authentication/ForgetPasswordCustomer/{email}" );
      urlBuilder_.Replace( "{email}", System.Uri.EscapeDataString( ConvertToString( email, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> IsUserExistInOracleDatabaseAsync( string email, string accountNumber )
    {
      return IsUserExistInOracleDatabaseAsync( email, accountNumber, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> IsUserExistInOracleDatabaseAsync( string email, string accountNumber, System.Threading.CancellationToken cancellationToken )
    {
      if( email == null )
        throw new System.ArgumentNullException( "email" );

      if( accountNumber == null )
        throw new System.ArgumentNullException( "accountNumber" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Authentication/IsUserExistInOracleDatabase/{email}/{accountNumber}" );
      urlBuilder_.Replace( "{email}", System.Uri.EscapeDataString( ConvertToString( email, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{accountNumber}", System.Uri.EscapeDataString( ConvertToString( accountNumber, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<Admin> LoginAdminAsync( string email, string password )
    {
      return LoginAdminAsync( email, password, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<Admin> LoginAdminAsync( string email, string password, System.Threading.CancellationToken cancellationToken )
    {
      if( email == null )
        throw new System.ArgumentNullException( "email" );

      if( password == null )
        throw new System.ArgumentNullException( "password" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Authentication/LoginAdmin/{email}/{password}" );
      urlBuilder_.Replace( "{email}", System.Uri.EscapeDataString( ConvertToString( email, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{password}", System.Uri.EscapeDataString( ConvertToString( password, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<Admin>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<string> VerifyOTPAsync( string email, string otpCode )
    {
      return VerifyOTPAsync( email, otpCode, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<string> VerifyOTPAsync( string email, string otpCode, System.Threading.CancellationToken cancellationToken )
    {
      if( email == null )
        throw new System.ArgumentNullException( "email" );

      if( otpCode == null )
        throw new System.ArgumentNullException( "otpCode" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Authentication/VerifyOTP/{email}/{otpCode}" );
      urlBuilder_.Replace( "{email}", System.Uri.EscapeDataString( ConvertToString( email, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{otpCode}", System.Uri.EscapeDataString( ConvertToString( otpCode, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<string>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> ResetPasswordAsync( string email, string password )
    {
      return ResetPasswordAsync( email, password, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> ResetPasswordAsync( string email, string password, System.Threading.CancellationToken cancellationToken )
    {
      if( email == null )
        throw new System.ArgumentNullException( "email" );

      if( password == null )
        throw new System.ArgumentNullException( "password" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Authentication/ResetPassword/{email}/{password}" );
      urlBuilder_.Replace( "{email}", System.Uri.EscapeDataString( ConvertToString( email, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{password}", System.Uri.EscapeDataString( ConvertToString( password, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> IsCustomerAlreadyRegisteredAsync( string email, string accountNumber )
    {
      return IsCustomerAlreadyRegisteredAsync( email, accountNumber, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> IsCustomerAlreadyRegisteredAsync( string email, string accountNumber, System.Threading.CancellationToken cancellationToken )
    {
      if( email == null )
        throw new System.ArgumentNullException( "email" );

      if( accountNumber == null )
        throw new System.ArgumentNullException( "accountNumber" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Authentication/IsCustomerAlreadyRegistered/{email}/{accountNumber}" );
      urlBuilder_.Replace( "{email}", System.Uri.EscapeDataString( ConvertToString( email, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{accountNumber}", System.Uri.EscapeDataString( ConvertToString( accountNumber, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> SendOtpForRegistrationAsync( string email )
    {
      return SendOtpForRegistrationAsync( email, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> SendOtpForRegistrationAsync( string email, System.Threading.CancellationToken cancellationToken )
    {
      if( email == null )
        throw new System.ArgumentNullException( "email" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Authentication/SendOtpForRegistration/{email}" );
      urlBuilder_.Replace( "{email}", System.Uri.EscapeDataString( ConvertToString( email, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> SaveCurrentUserContextAsync( string accountNumber, int accountId, int customerId, string accountName, bool isMain, string merchantReference )
    {
      return SaveCurrentUserContextAsync( accountNumber, accountId, customerId, accountName, isMain, merchantReference, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> SaveCurrentUserContextAsync( string accountNumber, int accountId, int customerId, string accountName, bool isMain, string merchantReference, System.Threading.CancellationToken cancellationToken )
    {
      if( accountNumber == null )
        throw new System.ArgumentNullException( "accountNumber" );

      if( accountId == null )
        throw new System.ArgumentNullException( "accountId" );

      if( customerId == null )
        throw new System.ArgumentNullException( "customerId" );

      if( accountName == null )
        throw new System.ArgumentNullException( "accountName" );

      if( isMain == null )
        throw new System.ArgumentNullException( "isMain" );

      if( merchantReference == null )
        throw new System.ArgumentNullException( "merchantReference" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Authentication/SaveCurrentUserContext/{accountNumber}/{accountId}/{customerId}/{accountName}/{isMain}/{merchantReference}" );
      urlBuilder_.Replace( "{accountNumber}", System.Uri.EscapeDataString( ConvertToString( accountNumber, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{accountId}", System.Uri.EscapeDataString( ConvertToString( accountId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{customerId}", System.Uri.EscapeDataString( ConvertToString( customerId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{accountName}", System.Uri.EscapeDataString( ConvertToString( accountName, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{isMain}", System.Uri.EscapeDataString( ConvertToString( isMain, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{merchantReference}", System.Uri.EscapeDataString( ConvertToString( merchantReference, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Content = new System.Net.Http.StringContent( string.Empty, System.Text.Encoding.UTF8, "text/plain" );
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<CustomerContext> GetCurrentUserContextAsync( string merchantReference )
    {
      return GetCurrentUserContextAsync( merchantReference, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<CustomerContext> GetCurrentUserContextAsync( string merchantReference, System.Threading.CancellationToken cancellationToken )
    {
      if( merchantReference == null )
        throw new System.ArgumentNullException( "merchantReference" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Authentication/GetCurrentUserContext/{merchantReference}" );
      urlBuilder_.Replace( "{merchantReference}", System.Uri.EscapeDataString( ConvertToString( merchantReference, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<CustomerContext>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<Customer> GetCustomerByIdAsync( int id )
    {
      return GetCustomerByIdAsync( id, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<Customer> GetCustomerByIdAsync( int id, System.Threading.CancellationToken cancellationToken )
    {
      if( id == null )
        throw new System.ArgumentNullException( "id" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Customer/GetCustomerById/{id}" );
      urlBuilder_.Replace( "{id}", System.Uri.EscapeDataString( ConvertToString( id, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<Customer>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<int> SaveCustomerAsync( Customer body )
    {
      return SaveCustomerAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<int> SaveCustomerAsync( Customer body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Customer/SaveCustomer" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<int>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Account>> GetAccountsLinkedAsync( int customerId )
    {
      return GetAccountsLinkedAsync( customerId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Account>> GetAccountsLinkedAsync( int customerId, System.Threading.CancellationToken cancellationToken )
    {
      if( customerId == null )
        throw new System.ArgumentNullException( "customerId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Customer/GetAccountsLinked/{customerId}" );
      urlBuilder_.Replace( "{customerId}", System.Uri.EscapeDataString( ConvertToString( customerId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Account>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<int> PostAccountForLinkingAsync( int accountId, int customerId )
    {
      return PostAccountForLinkingAsync( accountId, customerId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<int> PostAccountForLinkingAsync( int accountId, int customerId, System.Threading.CancellationToken cancellationToken )
    {
      if( accountId == null )
        throw new System.ArgumentNullException( "accountId" );

      if( customerId == null )
        throw new System.ArgumentNullException( "customerId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Customer/PostAccountForLinking/{accountId}/{customerId}" );
      urlBuilder_.Replace( "{accountId}", System.Uri.EscapeDataString( ConvertToString( accountId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{customerId}", System.Uri.EscapeDataString( ConvertToString( customerId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<int>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Customer>> GetCustomersByLocationAsync( string location )
    {
      return GetCustomersByLocationAsync( location, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Customer>> GetCustomersByLocationAsync( string location, System.Threading.CancellationToken cancellationToken )
    {
      if( location == null )
        throw new System.ArgumentNullException( "location" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Customer/GetCustomersByLocation/{location}" );
      urlBuilder_.Replace( "{location}", System.Uri.EscapeDataString( ConvertToString( location, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Customer>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<OracleCustomerDTO> GetCustomerFromOracleDatabaseAsync( string accountNumber )
    {
      return GetCustomerFromOracleDatabaseAsync( accountNumber, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OracleCustomerDTO> GetCustomerFromOracleDatabaseAsync( string accountNumber, System.Threading.CancellationToken cancellationToken )
    {
      if( accountNumber == null )
        throw new System.ArgumentNullException( "accountNumber" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Customer/GetCustomerFromOracleDatabase/{accountNumber}" );
      urlBuilder_.Replace( "{accountNumber}", System.Uri.EscapeDataString( ConvertToString( accountNumber, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<OracleCustomerDTO>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<Account> GetAccountByAccountIdAsync( int accountId )
    {
      return GetAccountByAccountIdAsync( accountId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<Account> GetAccountByAccountIdAsync( int accountId, System.Threading.CancellationToken cancellationToken )
    {
      if( accountId == null )
        throw new System.ArgumentNullException( "accountId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Customer/GetAccountByAccountId/{accountId}" );
      urlBuilder_.Replace( "{accountId}", System.Uri.EscapeDataString( ConvertToString( accountId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<Account>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> MarkCustomerAccountSelectedAsync( int accountId )
    {
      return MarkCustomerAccountSelectedAsync( accountId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> MarkCustomerAccountSelectedAsync( int accountId, System.Threading.CancellationToken cancellationToken )
    {
      if( accountId == null )
        throw new System.ArgumentNullException( "accountId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Customer/MarkCustomerAccountSelected/{accountId}" );
      urlBuilder_.Replace( "{accountId}", System.Uri.EscapeDataString( ConvertToString( accountId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Customer>> GetCustomersByRegionAsync( System.Collections.Generic.IEnumerable<string> regions )
    {
      return GetCustomersByRegionAsync( regions, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Customer>> GetCustomersByRegionAsync( System.Collections.Generic.IEnumerable<string> regions, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Customer/GetCustomersByRegion?" );
      if( regions != null )
      {
        foreach( var item_ in regions ) { urlBuilder_.Append( System.Uri.EscapeDataString( "regions" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( item_, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" ); }
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Customer>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Customer>> GetCustomersByAdminIdAsync( int adminId )
    {
      return GetCustomersByAdminIdAsync( adminId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Customer>> GetCustomersByAdminIdAsync( int adminId, System.Threading.CancellationToken cancellationToken )
    {
      if( adminId == null )
        throw new System.ArgumentNullException( "adminId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Customer/GetCustomersByAdminId/{adminId}" );
      urlBuilder_.Replace( "{adminId}", System.Uri.EscapeDataString( ConvertToString( adminId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Customer>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Customer>> GetAllCustomerAsync()
    {
      return GetAllCustomerAsync( System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Customer>> GetAllCustomerAsync( System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Customer/GetAllCustomer" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Customer>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> SetCustomerStatusAsync( int? customerId, string status )
    {
      return SetCustomerStatusAsync( customerId, status, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> SetCustomerStatusAsync( int? customerId, string status, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Customer/SetCustomerStatus?" );
      if( customerId != null )
      {
        urlBuilder_.Append( System.Uri.EscapeDataString( "customerId" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( customerId, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
      }
      if( status != null )
      {
        urlBuilder_.Append( System.Uri.EscapeDataString( "status" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( status, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Content = new System.Net.Http.StringContent( string.Empty, System.Text.Encoding.UTF8, "text/plain" );
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> GetInvoicesByDateRangeStatusAsync( System.DateTime date1, System.DateTime date2, int customerId, int accountId, string status )
    {
      return GetInvoicesByDateRangeStatusAsync( date1, date2, customerId, accountId, status, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> GetInvoicesByDateRangeStatusAsync( System.DateTime date1, System.DateTime date2, int customerId, int accountId, string status, System.Threading.CancellationToken cancellationToken )
    {
      if( date1 == null )
        throw new System.ArgumentNullException( "date1" );

      if( date2 == null )
        throw new System.ArgumentNullException( "date2" );

      if( customerId == null )
        throw new System.ArgumentNullException( "customerId" );

      if( accountId == null )
        throw new System.ArgumentNullException( "accountId" );

      if( status == null )
        throw new System.ArgumentNullException( "status" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Invoice/GetInvoicesByDateRangeStatus/{date1}/{date2}/{customerId}/{accountId}/{status}" );
      urlBuilder_.Replace( "{date1}", System.Uri.EscapeDataString( date1.ToString( "s", System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{date2}", System.Uri.EscapeDataString( date2.ToString( "s", System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{customerId}", System.Uri.EscapeDataString( ConvertToString( customerId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{accountId}", System.Uri.EscapeDataString( ConvertToString( accountId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{status}", System.Uri.EscapeDataString( ConvertToString( status, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Invoice>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<Invoice> GetInvoiceWithPaymentInfoAsync( int invoiceId, int customerId )
    {
      return GetInvoiceWithPaymentInfoAsync( invoiceId, customerId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<Invoice> GetInvoiceWithPaymentInfoAsync( int invoiceId, int customerId, System.Threading.CancellationToken cancellationToken )
    {
      if( invoiceId == null )
        throw new System.ArgumentNullException( "invoiceId" );

      if( customerId == null )
        throw new System.ArgumentNullException( "customerId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Invoice/GetInvoiceWithPaymentInfo/{invoiceId}/{customerId}" );
      urlBuilder_.Replace( "{invoiceId}", System.Uri.EscapeDataString( ConvertToString( invoiceId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{customerId}", System.Uri.EscapeDataString( ConvertToString( customerId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<Invoice>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> GetInvoicesByLocationDateRangeStatusAsync( string location, System.DateTime date1, System.DateTime date2, string status )
    {
      return GetInvoicesByLocationDateRangeStatusAsync( location, date1, date2, status, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> GetInvoicesByLocationDateRangeStatusAsync( string location, System.DateTime date1, System.DateTime date2, string status, System.Threading.CancellationToken cancellationToken )
    {
      if( location == null )
        throw new System.ArgumentNullException( "location" );

      if( date1 == null )
        throw new System.ArgumentNullException( "date1" );

      if( date2 == null )
        throw new System.ArgumentNullException( "date2" );

      if( status == null )
        throw new System.ArgumentNullException( "status" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Invoice/GetInvoicesByLocationDateRangeStatus/{location}/{date1}/{date2}/{status}" );
      urlBuilder_.Replace( "{location}", System.Uri.EscapeDataString( ConvertToString( location, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{date1}", System.Uri.EscapeDataString( date1.ToString( "s", System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{date2}", System.Uri.EscapeDataString( date2.ToString( "s", System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{status}", System.Uri.EscapeDataString( ConvertToString( status, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Invoice>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> SaveCustomerInvoicesAsync( System.Collections.Generic.IEnumerable<Invoice> body )
    {
      return SaveCustomerInvoicesAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> SaveCustomerInvoicesAsync( System.Collections.Generic.IEnumerable<Invoice> body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Invoice/SaveCustomerInvoices" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> GetCustomerInvoicesByAccountNumberAsync( string accountNumber )
    {
      return GetCustomerInvoicesByAccountNumberAsync( accountNumber, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> GetCustomerInvoicesByAccountNumberAsync( string accountNumber, System.Threading.CancellationToken cancellationToken )
    {
      if( accountNumber == null )
        throw new System.ArgumentNullException( "accountNumber" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Invoice/GetCustomerInvoicesByAccountNumber/{accountNumber}" );
      urlBuilder_.Replace( "{accountNumber}", System.Uri.EscapeDataString( ConvertToString( accountNumber, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Invoice>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> GetCustomerDisputedInvoicesByAccountIdAsync( int accountId )
    {
      return GetCustomerDisputedInvoicesByAccountIdAsync( accountId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> GetCustomerDisputedInvoicesByAccountIdAsync( int accountId, System.Threading.CancellationToken cancellationToken )
    {
      if( accountId == null )
        throw new System.ArgumentNullException( "accountId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Invoice/GetCustomerDisputedInvoicesByAccountId/{accountId}" );
      urlBuilder_.Replace( "{accountId}", System.Uri.EscapeDataString( ConvertToString( accountId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Invoice>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> RefreshCustomerInvoicesAsync( RefreshInvoiceDTO body )
    {
      return RefreshCustomerInvoicesAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> RefreshCustomerInvoicesAsync( RefreshInvoiceDTO body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Invoice/RefreshCustomerInvoices" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> SaveMerchantInvoiceReferenceAsync( MerchantInvoiceReferenceDTO body )
    {
      return SaveMerchantInvoiceReferenceAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> SaveMerchantInvoiceReferenceAsync( MerchantInvoiceReferenceDTO body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Invoice/SaveMerchantInvoiceReference" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MerchantInvoiceReference>> GetMerchantReferenceInvoicesAsync( string merchangtReference )
    {
      return GetMerchantReferenceInvoicesAsync( merchangtReference, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MerchantInvoiceReference>> GetMerchantReferenceInvoicesAsync( string merchangtReference, System.Threading.CancellationToken cancellationToken )
    {
      if( merchangtReference == null )
        throw new System.ArgumentNullException( "merchangtReference" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Invoice/GetMerchantReferenceInvoices/{merchangtReference}" );
      urlBuilder_.Replace( "{merchangtReference}", System.Uri.EscapeDataString( ConvertToString( merchangtReference, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MerchantInvoiceReference>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> GetAllInvoicesAsync()
    {
      return GetAllInvoicesAsync( System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> GetAllInvoicesAsync( System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Invoice/GetAllInvoices" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Invoice>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> GetAllCustomerDisputedInvoicesAsync()
    {
      return GetAllCustomerDisputedInvoicesAsync( System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> GetAllCustomerDisputedInvoicesAsync( System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Invoice/GetAllCustomerDisputedInvoices" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Invoice>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoiceRowDTO>> GetInvoicesByAdminIdAsync( int adminId )
    {
      return GetInvoicesByAdminIdAsync( adminId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoiceRowDTO>> GetInvoicesByAdminIdAsync( int adminId, System.Threading.CancellationToken cancellationToken )
    {
      if( adminId == null )
        throw new System.ArgumentNullException( "adminId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Invoice/GetInvoicesByAdminId/{adminId}" );
      urlBuilder_.Replace( "{adminId}", System.Uri.EscapeDataString( ConvertToString( adminId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InvoiceRowDTO>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> GetDisputedInvoicesByAdminIdAsync( int adminId )
    {
      return GetDisputedInvoicesByAdminIdAsync( adminId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> GetDisputedInvoicesByAdminIdAsync( int adminId, System.Threading.CancellationToken cancellationToken )
    {
      if( adminId == null )
        throw new System.ArgumentNullException( "adminId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Invoice/GetDisputedInvoicesByAdminId/{adminId}" );
      urlBuilder_.Replace( "{adminId}", System.Uri.EscapeDataString( ConvertToString( adminId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Invoice>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<int> SavePaymentAsync( int invoiceId, int accountId, int customerId, string status, System.DateTime date, string paymentMethod )
    {
      return SavePaymentAsync( invoiceId, accountId, customerId, status, date, paymentMethod, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<int> SavePaymentAsync( int invoiceId, int accountId, int customerId, string status, System.DateTime date, string paymentMethod, System.Threading.CancellationToken cancellationToken )
    {
      if( invoiceId == null )
        throw new System.ArgumentNullException( "invoiceId" );

      if( accountId == null )
        throw new System.ArgumentNullException( "accountId" );

      if( customerId == null )
        throw new System.ArgumentNullException( "customerId" );

      if( status == null )
        throw new System.ArgumentNullException( "status" );

      if( date == null )
        throw new System.ArgumentNullException( "date" );

      if( paymentMethod == null )
        throw new System.ArgumentNullException( "paymentMethod" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Payment/SavePayment/{invoiceId}/{accountId}/{customerId}/{status}/{date}/{paymentMethod}" );
      urlBuilder_.Replace( "{invoiceId}", System.Uri.EscapeDataString( ConvertToString( invoiceId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{accountId}", System.Uri.EscapeDataString( ConvertToString( accountId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{customerId}", System.Uri.EscapeDataString( ConvertToString( customerId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{status}", System.Uri.EscapeDataString( ConvertToString( status, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{date}", System.Uri.EscapeDataString( date.ToString( "s", System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{paymentMethod}", System.Uri.EscapeDataString( ConvertToString( paymentMethod, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Content = new System.Net.Http.StringContent( string.Empty, System.Text.Encoding.UTF8, "text/plain" );
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<int>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Payment>> GetPaymentsByDateRangeAsync( System.DateTime date1, System.DateTime date2, int customerId, int accountId, string status )
    {
      return GetPaymentsByDateRangeAsync( date1, date2, customerId, accountId, status, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Payment>> GetPaymentsByDateRangeAsync( System.DateTime date1, System.DateTime date2, int customerId, int accountId, string status, System.Threading.CancellationToken cancellationToken )
    {
      if( date1 == null )
        throw new System.ArgumentNullException( "date1" );

      if( date2 == null )
        throw new System.ArgumentNullException( "date2" );

      if( customerId == null )
        throw new System.ArgumentNullException( "customerId" );

      if( accountId == null )
        throw new System.ArgumentNullException( "accountId" );

      if( status == null )
        throw new System.ArgumentNullException( "status" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Payment/GetPaymentsByDateRange/{date1}/{date2}/{customerId}/{accountId}/{status}" );
      urlBuilder_.Replace( "{date1}", System.Uri.EscapeDataString( date1.ToString( "s", System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{date2}", System.Uri.EscapeDataString( date2.ToString( "s", System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{customerId}", System.Uri.EscapeDataString( ConvertToString( customerId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{accountId}", System.Uri.EscapeDataString( ConvertToString( accountId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{status}", System.Uri.EscapeDataString( ConvertToString( status, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Payment>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<Payment> GetPaymentByIdAsync( int paymentId )
    {
      return GetPaymentByIdAsync( paymentId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<Payment> GetPaymentByIdAsync( int paymentId, System.Threading.CancellationToken cancellationToken )
    {
      if( paymentId == null )
        throw new System.ArgumentNullException( "paymentId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Payment/GetPaymentById/{paymentId}" );
      urlBuilder_.Replace( "{paymentId}", System.Uri.EscapeDataString( ConvertToString( paymentId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<Payment>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Payment>> GetPaymentsByLocationCustomerDateRangeAsync( string location, System.DateTime date1, System.DateTime date2, int customerId )
    {
      return GetPaymentsByLocationCustomerDateRangeAsync( location, date1, date2, customerId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Payment>> GetPaymentsByLocationCustomerDateRangeAsync( string location, System.DateTime date1, System.DateTime date2, int customerId, System.Threading.CancellationToken cancellationToken )
    {
      if( location == null )
        throw new System.ArgumentNullException( "location" );

      if( date1 == null )
        throw new System.ArgumentNullException( "date1" );

      if( date2 == null )
        throw new System.ArgumentNullException( "date2" );

      if( customerId == null )
        throw new System.ArgumentNullException( "customerId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Payment/GetPaymentsByLocationCustomerDateRange/{location}/{date1}/{date2}/{customerId}" );
      urlBuilder_.Replace( "{location}", System.Uri.EscapeDataString( ConvertToString( location, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{date1}", System.Uri.EscapeDataString( date1.ToString( "s", System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{date2}", System.Uri.EscapeDataString( date2.ToString( "s", System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{customerId}", System.Uri.EscapeDataString( ConvertToString( customerId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Payment>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> SavePayment2Async( PaymentDTO body )
    {
      return SavePayment2Async( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> SavePayment2Async( PaymentDTO body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Payment/SavePayment" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Payment>> GetPaymentsByAccountNumberAsync( string accountNumber )
    {
      return GetPaymentsByAccountNumberAsync( accountNumber, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Payment>> GetPaymentsByAccountNumberAsync( string accountNumber, System.Threading.CancellationToken cancellationToken )
    {
      if( accountNumber == null )
        throw new System.ArgumentNullException( "accountNumber" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Payment/GetPaymentsByAccountNumber/{accountNumber}" );
      urlBuilder_.Replace( "{accountNumber}", System.Uri.EscapeDataString( ConvertToString( accountNumber, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Payment>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> SaveCustomerPaymentsAsync( System.Collections.Generic.IEnumerable<Payment> body )
    {
      return SaveCustomerPaymentsAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> SaveCustomerPaymentsAsync( System.Collections.Generic.IEnumerable<Payment> body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Payment/SaveCustomerPayments" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> RefreshCustomerPaymentsAsync( RefreshPaymentDTO body )
    {
      return RefreshCustomerPaymentsAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> RefreshCustomerPaymentsAsync( RefreshPaymentDTO body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Payment/RefreshCustomerPayments" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Payment>> GetAllPaymentsAsync()
    {
      return GetAllPaymentsAsync( System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Payment>> GetAllPaymentsAsync( System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Payment/GetAllPayments" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Payment>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<StringStringDictionaryAPIResponse> CreatePaymentGatewayAsync( PaymentGatewayDetails body )
    {
      return CreatePaymentGatewayAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<StringStringDictionaryAPIResponse> CreatePaymentGatewayAsync( PaymentGatewayDetails body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/CreatePaymentGateway" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<StringStringDictionaryAPIResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<StringAPIResponse> UpdatePaymentGatewayAsync( PaymentGatewayDetails body )
    {
      return UpdatePaymentGatewayAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<StringAPIResponse> UpdatePaymentGatewayAsync( PaymentGatewayDetails body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/UpdatePaymentGateway" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<StringAPIResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<StringAPIResponse> ConfigureMerchantCurrenciesAsync( System.Collections.Generic.IEnumerable<ConfiguredCurrencies> body )
    {
      return ConfigureMerchantCurrenciesAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<StringAPIResponse> ConfigureMerchantCurrenciesAsync( System.Collections.Generic.IEnumerable<ConfiguredCurrencies> body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/ConfigureMerchantCurrencies" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<StringAPIResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<PaymentGatewayDetailsListAPIResponse> GetPaymentGatewayDetailsAsync( System.Guid merchantId, string gatewayOption, System.Guid userId )
    {
      return GetPaymentGatewayDetailsAsync( merchantId, gatewayOption, userId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<PaymentGatewayDetailsListAPIResponse> GetPaymentGatewayDetailsAsync( System.Guid merchantId, string gatewayOption, System.Guid userId, System.Threading.CancellationToken cancellationToken )
    {
      if( merchantId == null )
        throw new System.ArgumentNullException( "merchantId" );

      if( gatewayOption == null )
        throw new System.ArgumentNullException( "gatewayOption" );

      if( userId == null )
        throw new System.ArgumentNullException( "userId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/GetPaymentGatewayDetails/{MerchantId}/{GatewayOption}/{UserId}" );
      urlBuilder_.Replace( "{MerchantId}", System.Uri.EscapeDataString( ConvertToString( merchantId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{GatewayOption}", System.Uri.EscapeDataString( ConvertToString( gatewayOption, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{UserId}", System.Uri.EscapeDataString( ConvertToString( userId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<PaymentGatewayDetailsListAPIResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<PaymentGatewayDetailsListAPIResponse> GetPaymentGatewayDetails2Async( System.Guid merchantId, string gatewayOption )
    {
      return GetPaymentGatewayDetails2Async( merchantId, gatewayOption, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<PaymentGatewayDetailsListAPIResponse> GetPaymentGatewayDetails2Async( System.Guid merchantId, string gatewayOption, System.Threading.CancellationToken cancellationToken )
    {
      if( merchantId == null )
        throw new System.ArgumentNullException( "merchantId" );

      if( gatewayOption == null )
        throw new System.ArgumentNullException( "gatewayOption" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/GetPaymentGatewayDetails/{MerchantId}/{GatewayOption}" );
      urlBuilder_.Replace( "{MerchantId}", System.Uri.EscapeDataString( ConvertToString( merchantId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{GatewayOption}", System.Uri.EscapeDataString( ConvertToString( gatewayOption, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<PaymentGatewayDetailsListAPIResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<StringAPIResponse> CreateTransactionDetailsAsync( TransactionDetails body )
    {
      return CreateTransactionDetailsAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<StringAPIResponse> CreateTransactionDetailsAsync( TransactionDetails body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/CreateTransactionDetails" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<StringAPIResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<StringAPIResponse> AuthorizeTransactionAsync( UpdateTransactionDetails body )
    {
      return AuthorizeTransactionAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<StringAPIResponse> AuthorizeTransactionAsync( UpdateTransactionDetails body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/AuthorizeTransaction" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<StringAPIResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<StringAPIResponse> FailTransactionAsync( UpdateTransactionDetails body )
    {
      return FailTransactionAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<StringAPIResponse> FailTransactionAsync( UpdateTransactionDetails body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/FailTransaction" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<StringAPIResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<TransactionInputListAPIResponse> GetTransactionDetailsAsync( System.Guid merchantId, int orderId )
    {
      return GetTransactionDetailsAsync( merchantId, orderId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<TransactionInputListAPIResponse> GetTransactionDetailsAsync( System.Guid merchantId, int orderId, System.Threading.CancellationToken cancellationToken )
    {
      if( merchantId == null )
        throw new System.ArgumentNullException( "merchantId" );

      if( orderId == null )
        throw new System.ArgumentNullException( "orderId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/GetTransactionDetails/{MerchantId}/{OrderId}" );
      urlBuilder_.Replace( "{MerchantId}", System.Uri.EscapeDataString( ConvertToString( merchantId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{OrderId}", System.Uri.EscapeDataString( ConvertToString( orderId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<TransactionInputListAPIResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<PaymentResponseView> IntializePaymentAsync( PaymentRequestView body )
    {
      return IntializePaymentAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<PaymentResponseView> IntializePaymentAsync( PaymentRequestView body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/IntializePayment" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<PaymentResponseView>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<PaymentResponseViewAPIResponse> CompletePaymentAsync( PaymentRequestView body )
    {
      return CompletePaymentAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<PaymentResponseViewAPIResponse> CompletePaymentAsync( PaymentRequestView body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/CompletePayment" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<PaymentResponseViewAPIResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<TransactionInputAPIResponse> GetTransactionDetailsByIdAsync( System.Guid merchantId, int transactionId )
    {
      return GetTransactionDetailsByIdAsync( merchantId, transactionId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<TransactionInputAPIResponse> GetTransactionDetailsByIdAsync( System.Guid merchantId, int transactionId, System.Threading.CancellationToken cancellationToken )
    {
      if( merchantId == null )
        throw new System.ArgumentNullException( "merchantId" );

      if( transactionId == null )
        throw new System.ArgumentNullException( "transactionId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/GetTransactionDetailsById/{MerchantId}/{TransactionId}" );
      urlBuilder_.Replace( "{MerchantId}", System.Uri.EscapeDataString( ConvertToString( merchantId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{TransactionId}", System.Uri.EscapeDataString( ConvertToString( transactionId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<TransactionInputAPIResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<PaymentGatewaysListAPIResponse> GetMasterPaymentGatewaysAsync()
    {
      return GetMasterPaymentGatewaysAsync( System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<PaymentGatewaysListAPIResponse> GetMasterPaymentGatewaysAsync( System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/GetMasterPaymentGateways" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<PaymentGatewaysListAPIResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<MerchantConfiguredPaymentGatewayListAPIResponse> GetMerchantConfiguredPaymentGatewaysAsync()
    {
      return GetMerchantConfiguredPaymentGatewaysAsync( System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<MerchantConfiguredPaymentGatewayListAPIResponse> GetMerchantConfiguredPaymentGatewaysAsync( System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/GetMerchantConfiguredPaymentGateways" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<MerchantConfiguredPaymentGatewayListAPIResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<PaymentGatewaysListAPIResponse> GetMasterPaymentGatewaysByIdAsync( string countrycode, string gatewayOption )
    {
      return GetMasterPaymentGatewaysByIdAsync( countrycode, gatewayOption, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<PaymentGatewaysListAPIResponse> GetMasterPaymentGatewaysByIdAsync( string countrycode, string gatewayOption, System.Threading.CancellationToken cancellationToken )
    {
      if( countrycode == null )
        throw new System.ArgumentNullException( "countrycode" );

      if( gatewayOption == null )
        throw new System.ArgumentNullException( "gatewayOption" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/GetMasterPaymentGatewaysById/{countrycode}/{GatewayOption}" );
      urlBuilder_.Replace( "{countrycode}", System.Uri.EscapeDataString( ConvertToString( countrycode, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{GatewayOption}", System.Uri.EscapeDataString( ConvertToString( gatewayOption, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<PaymentGatewaysListAPIResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<PaymentGatewayDetailsListAPIResponse> GetPaymentGatewayConfigurationAsync( int id )
    {
      return GetPaymentGatewayConfigurationAsync( id, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<PaymentGatewayDetailsListAPIResponse> GetPaymentGatewayConfigurationAsync( int id, System.Threading.CancellationToken cancellationToken )
    {
      if( id == null )
        throw new System.ArgumentNullException( "id" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/GetPaymentGatewayConfiguration/{Id}" );
      urlBuilder_.Replace( "{Id}", System.Uri.EscapeDataString( ConvertToString( id, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<PaymentGatewayDetailsListAPIResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<PaymentGatewaysListAPIResponse> GetAllConfiguredPaymentGatewaysAsync()
    {
      return GetAllConfiguredPaymentGatewaysAsync( System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<PaymentGatewaysListAPIResponse> GetAllConfiguredPaymentGatewaysAsync( System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/GetAllConfiguredPaymentGateways" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<PaymentGatewaysListAPIResponse>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> CompleteTransactionAmazonPaymentAsync( AmazonPaymentResponseViewDTO body )
    {
      return CompleteTransactionAmazonPaymentAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> CompleteTransactionAmazonPaymentAsync( AmazonPaymentResponseViewDTO body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/PaymentGateWay/CompleteTransactionAmazonPayment" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<Ticket> GetTicketByIdAsync( int id )
    {
      return GetTicketByIdAsync( id, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<Ticket> GetTicketByIdAsync( int id, System.Threading.CancellationToken cancellationToken )
    {
      if( id == null )
        throw new System.ArgumentNullException( "id" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Ticket/GetTicketById/{id}" );
      urlBuilder_.Replace( "{id}", System.Uri.EscapeDataString( ConvertToString( id, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<Ticket>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Ticket>> GetTicketsAsync( string location, int customerId, int accountId, int invoiceId, System.DateTime date1, System.DateTime date2 )
    {
      return GetTicketsAsync( location, customerId, accountId, invoiceId, date1, date2, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Ticket>> GetTicketsAsync( string location, int customerId, int accountId, int invoiceId, System.DateTime date1, System.DateTime date2, System.Threading.CancellationToken cancellationToken )
    {
      if( location == null )
        throw new System.ArgumentNullException( "location" );

      if( customerId == null )
        throw new System.ArgumentNullException( "customerId" );

      if( accountId == null )
        throw new System.ArgumentNullException( "accountId" );

      if( invoiceId == null )
        throw new System.ArgumentNullException( "invoiceId" );

      if( date1 == null )
        throw new System.ArgumentNullException( "date1" );

      if( date2 == null )
        throw new System.ArgumentNullException( "date2" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Ticket/GetTickets/{location}/{customerId}/{accountId}/{invoiceId}/{date1}/{date2}" );
      urlBuilder_.Replace( "{location}", System.Uri.EscapeDataString( ConvertToString( location, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{customerId}", System.Uri.EscapeDataString( ConvertToString( customerId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{accountId}", System.Uri.EscapeDataString( ConvertToString( accountId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{invoiceId}", System.Uri.EscapeDataString( ConvertToString( invoiceId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{date1}", System.Uri.EscapeDataString( date1.ToString( "s", System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{date2}", System.Uri.EscapeDataString( date2.ToString( "s", System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Ticket>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<Ticket> UpdateTicketByAdminAsync( Ticket body )
    {
      return UpdateTicketByAdminAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<Ticket> UpdateTicketByAdminAsync( Ticket body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Ticket/UpdateTicketByAdmin" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<Ticket>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> SaveTicketAsync( TicketDTO body )
    {
      return SaveTicketAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> SaveTicketAsync( TicketDTO body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Ticket/SaveTicket" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Ticket>> GetTicketsByAccountNumberAsync( string accountNumber )
    {
      return GetTicketsByAccountNumberAsync( accountNumber, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Ticket>> GetTicketsByAccountNumberAsync( string accountNumber, System.Threading.CancellationToken cancellationToken )
    {
      if( accountNumber == null )
        throw new System.ArgumentNullException( "accountNumber" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Ticket/GetTicketsByAccountNumber/{accountNumber}" );
      urlBuilder_.Replace( "{accountNumber}", System.Uri.EscapeDataString( ConvertToString( accountNumber, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Ticket>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> SaveTicketCommentAsync( TicketComment body )
    {
      return SaveTicketCommentAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> SaveTicketCommentAsync( TicketComment body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Ticket/SaveTicketComment" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TicketComment>> GetTicketCommentsByTicketIdAsync( int ticketId )
    {
      return GetTicketCommentsByTicketIdAsync( ticketId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TicketComment>> GetTicketCommentsByTicketIdAsync( int ticketId, System.Threading.CancellationToken cancellationToken )
    {
      if( ticketId == null )
        throw new System.ArgumentNullException( "ticketId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Ticket/GetTicketCommentsByTicketId/{ticketId}" );
      urlBuilder_.Replace( "{ticketId}", System.Uri.EscapeDataString( ConvertToString( ticketId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TicketComment>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Ticket>> GetAllTicketsAsync()
    {
      return GetAllTicketsAsync( System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Ticket>> GetAllTicketsAsync( System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Ticket/GetAllTickets" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Ticket>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> UpdateTicketStatusAsync( int id, string status )
    {
      return UpdateTicketStatusAsync( id, status, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> UpdateTicketStatusAsync( int id, string status, System.Threading.CancellationToken cancellationToken )
    {
      if( id == null )
        throw new System.ArgumentNullException( "id" );

      if( status == null )
        throw new System.ArgumentNullException( "status" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Ticket/UpdateTicketStatus/{id}/{status}" );
      urlBuilder_.Replace( "{id}", System.Uri.EscapeDataString( ConvertToString( id, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{status}", System.Uri.EscapeDataString( ConvertToString( status, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Ticket>> GetTicketsByAdminIdAsync( int adminId )
    {
      return GetTicketsByAdminIdAsync( adminId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Ticket>> GetTicketsByAdminIdAsync( int adminId, System.Threading.CancellationToken cancellationToken )
    {
      if( adminId == null )
        throw new System.ArgumentNullException( "adminId" );
      Console.WriteLine("Getting Tickets for admin");
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Ticket/GetTicketsByAdminId/{adminId}" );
      urlBuilder_.Replace( "{adminId}", System.Uri.EscapeDataString( ConvertToString( adminId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Ticket>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<Ticket> UpdateTicketAssigneeAsync( int id, int assigneeId )
    {
      return UpdateTicketAssigneeAsync( id, assigneeId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<Ticket> UpdateTicketAssigneeAsync( int id, int assigneeId, System.Threading.CancellationToken cancellationToken )
    {
      if( id == null )
        throw new System.ArgumentNullException( "id" );

      if( assigneeId == null )
        throw new System.ArgumentNullException( "assigneeId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Ticket/UpdateTicketAssignee/{id}/{assigneeId}" );
      urlBuilder_.Replace( "{id}", System.Uri.EscapeDataString( ConvertToString( id, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{assigneeId}", System.Uri.EscapeDataString( ConvertToString( assigneeId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<Ticket>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<TicketNote> SaveTicketNotesAsync( int adminId, string notes, int ticketId )
    {
      return SaveTicketNotesAsync( adminId, notes, ticketId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<TicketNote> SaveTicketNotesAsync( int adminId, string notes, int ticketId, System.Threading.CancellationToken cancellationToken )
    {
      if( adminId == null )
        throw new System.ArgumentNullException( "adminId" );

      if( notes == null )
        throw new System.ArgumentNullException( "notes" );

      if( ticketId == null )
        throw new System.ArgumentNullException( "ticketId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Ticket/SaveTicketNotes/{adminId}/{notes}/{ticketId}" );
      urlBuilder_.Replace( "{adminId}", System.Uri.EscapeDataString( ConvertToString( adminId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{notes}", System.Uri.EscapeDataString( ConvertToString( notes, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{ticketId}", System.Uri.EscapeDataString( ConvertToString( ticketId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<TicketNote>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransactionDTO>> GetTransactionsByDateRangeAsync( int customerId, int accountId, System.DateTime date1, System.DateTime date2 )
    {
      return GetTransactionsByDateRangeAsync( customerId, accountId, date1, date2, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransactionDTO>> GetTransactionsByDateRangeAsync( int customerId, int accountId, System.DateTime date1, System.DateTime date2, System.Threading.CancellationToken cancellationToken )
    {
      if( customerId == null )
        throw new System.ArgumentNullException( "customerId" );

      if( accountId == null )
        throw new System.ArgumentNullException( "accountId" );

      if( date1 == null )
        throw new System.ArgumentNullException( "date1" );

      if( date2 == null )
        throw new System.ArgumentNullException( "date2" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Transaction/GetTransactionsByDateRange/{customerId}/{accountId}/{date1}/{date2}" );
      urlBuilder_.Replace( "{customerId}", System.Uri.EscapeDataString( ConvertToString( customerId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{accountId}", System.Uri.EscapeDataString( ConvertToString( accountId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{date1}", System.Uri.EscapeDataString( date1.ToString( "s", System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{date2}", System.Uri.EscapeDataString( date2.ToString( "s", System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TransactionDTO>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransactionDTO>> GetTransactionsByLocationDateRangeAsync( string location, int customerId, int accountId, System.DateTime date1, System.DateTime date2 )
    {
      return GetTransactionsByLocationDateRangeAsync( location, customerId, accountId, date1, date2, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransactionDTO>> GetTransactionsByLocationDateRangeAsync( string location, int customerId, int accountId, System.DateTime date1, System.DateTime date2, System.Threading.CancellationToken cancellationToken )
    {
      if( location == null )
        throw new System.ArgumentNullException( "location" );

      if( customerId == null )
        throw new System.ArgumentNullException( "customerId" );

      if( accountId == null )
        throw new System.ArgumentNullException( "accountId" );

      if( date1 == null )
        throw new System.ArgumentNullException( "date1" );

      if( date2 == null )
        throw new System.ArgumentNullException( "date2" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Transaction/GetTransactionsByLocationDateRange/{location}/{customerId}/{accountId}/{date1}/{date2}" );
      urlBuilder_.Replace( "{location}", System.Uri.EscapeDataString( ConvertToString( location, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{customerId}", System.Uri.EscapeDataString( ConvertToString( customerId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{accountId}", System.Uri.EscapeDataString( ConvertToString( accountId, System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{date1}", System.Uri.EscapeDataString( date1.ToString( "s", System.Globalization.CultureInfo.InvariantCulture ) ) );
      urlBuilder_.Replace( "{date2}", System.Uri.EscapeDataString( date2.ToString( "s", System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TransactionDTO>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> SaveCustomerStatementsAsync( System.Collections.Generic.IEnumerable<Statement> body )
    {
      return SaveCustomerStatementsAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> SaveCustomerStatementsAsync( System.Collections.Generic.IEnumerable<Statement> body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Transaction/SaveCustomerStatements" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Statement>> GetCustomerStatementByAccountNumberAsync( string accountNumber )
    {
      return GetCustomerStatementByAccountNumberAsync( accountNumber, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Statement>> GetCustomerStatementByAccountNumberAsync( string accountNumber, System.Threading.CancellationToken cancellationToken )
    {
      if( accountNumber == null )
        throw new System.ArgumentNullException( "accountNumber" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Transaction/GetCustomerStatementByAccountNumber/{accountNumber}" );
      urlBuilder_.Replace( "{accountNumber}", System.Uri.EscapeDataString( ConvertToString( accountNumber, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Statement>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> TransactionAsync( Statement body )
    {
      return TransactionAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> TransactionAsync( Statement body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Transaction" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> RefreshCustomerStatementsAsync( RefreshStatementDTO body )
    {
      return RefreshCustomerStatementsAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> RefreshCustomerStatementsAsync( RefreshStatementDTO body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Transaction/RefreshCustomerStatements" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Statement>> GetAllStatementsAsync()
    {
      return GetAllStatementsAsync( System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Statement>> GetAllStatementsAsync( System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/Transaction/GetAllStatements" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Statement>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Admin>> GetUsersAsync()
    {
      return GetUsersAsync( System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Admin>> GetUsersAsync( System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/User/GetUsers" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Admin>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<int> CreateUserAsync()
    {
      return CreateUserAsync( System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<int> CreateUserAsync( System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/User/CreateUser" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<int>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<int> GetRolesAsync()
    {
      return GetRolesAsync( System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<int> GetRolesAsync( System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/User/GetRoles" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<int>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<int> AssignUserRoleAsync( int? userId, int? roleId )
    {
      return AssignUserRoleAsync( userId, roleId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<int> AssignUserRoleAsync( int? userId, int? roleId, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/User/AssignUserRole?" );
      if( userId != null )
      {
        urlBuilder_.Append( System.Uri.EscapeDataString( "userId" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( userId, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
      }
      if( roleId != null )
      {
        urlBuilder_.Append( System.Uri.EscapeDataString( "roleId" ) + "=" ).Append( System.Uri.EscapeDataString( ConvertToString( roleId, System.Globalization.CultureInfo.InvariantCulture ) ) ).Append( "&" );
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<int>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> SaveCustomerUserAsync( CustomerUserDTO body )
    {
      return SaveCustomerUserAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> SaveCustomerUserAsync( CustomerUserDTO body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/User/SaveCustomerUser" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Customer>> GetCustomerUsersAsync( int accountId )
    {
      return GetCustomerUsersAsync( accountId, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Customer>> GetCustomerUsersAsync( int accountId, System.Threading.CancellationToken cancellationToken )
    {
      if( accountId == null )
        throw new System.ArgumentNullException( "accountId" );

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/User/GetCustomerUsers/{accountId}" );
      urlBuilder_.Replace( "{accountId}", System.Uri.EscapeDataString( ConvertToString( accountId, System.Globalization.CultureInfo.InvariantCulture ) ) );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Customer>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> UpdateCustomerUserAsync( CustomerUserDTO body )
    {
      return UpdateCustomerUserAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> UpdateCustomerUserAsync( CustomerUserDTO body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/User/UpdateCustomerUser" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<bool> SaveAdminUserAsync( AdminUserDTO body )
    {
      return SaveAdminUserAsync( body, System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<bool> SaveAdminUserAsync( AdminUserDTO body, System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/User/SaveAdminUser" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          var content_ = new System.Net.Http.StringContent( System.Text.Json.JsonSerializer.Serialize( body, _settings.Value ) );
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse( "application/json" );
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod( "POST" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<bool>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Admin>> GetAllUsersAsync()
    {
      return GetAllUsersAsync( System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Admin>> GetAllUsersAsync( System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/api/User/GetAllUsers" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Admin>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WeatherForecast>> GetWeatherForecastAsync()
    {
      return GetWeatherForecastAsync( System.Threading.CancellationToken.None );
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WeatherForecast>> GetWeatherForecastAsync( System.Threading.CancellationToken cancellationToken )
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append( BaseUrl != null ? BaseUrl.TrimEnd( '/' ) : "" ).Append( "/WeatherForecast" );

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using( var request_ = new System.Net.Http.HttpRequestMessage() )
        {
          request_.Method = new System.Net.Http.HttpMethod( "GET" );
          request_.Headers.Accept.Add( System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse( "text/plain" ) );

          PrepareRequest( client_, request_, urlBuilder_ );

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri( url_, System.UriKind.RelativeOrAbsolute );

          PrepareRequest( client_, request_, url_ );

          var response_ = await client_.SendAsync( request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken ).ConfigureAwait( false );
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary( response_.Headers, h_ => h_.Key, h_ => h_.Value );
            if( response_.Content != null && response_.Content.Headers != null )
            {
              foreach( var item_ in response_.Content.Headers )
                headers_[ item_.Key ] = item_.Value;
            }

            ProcessResponse( client_, response_ );

            var status_ = (int) response_.StatusCode;
            if( status_ == 200 )
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WeatherForecast>>( response_, headers_, cancellationToken ).ConfigureAwait( false );
              if( objectResponse_.Object == null )
              {
                throw new ApiException( "Response was null which was not expected.", status_, objectResponse_.Text, headers_, null );
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait( false );
              throw new ApiException( "The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null );
            }
          }
          finally
          {
            if( disposeResponse_ )
              response_.Dispose();
          }
        }
      }
      finally
      {
        if( disposeClient_ )
          client_.Dispose();
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult( T responseObject, string responseText )
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>( System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken )
    {
      if( response == null || response.Content == null )
      {
        return new ObjectResponseResult<T>( default( T ), string.Empty );
      }

      if( ReadResponseAsString )
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait( false );
        try
        {
          var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>( responseText, JsonSerializerSettings );
          return new ObjectResponseResult<T>( typedBody, responseText );
        }
        catch( System.Text.Json.JsonException exception )
        {
          var message = "Could not deserialize the response body string as " + typeof( T ).FullName + ".";
          throw new ApiException( message, (int) response.StatusCode, responseText, headers, exception );
        }
      }
      else
      {
        try
        {
          using( var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait( false ) )
          {
            var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>( responseStream, JsonSerializerSettings, cancellationToken ).ConfigureAwait( false );
            return new ObjectResponseResult<T>( typedBody, string.Empty );
          }
        }
        catch( System.Text.Json.JsonException exception )
        {
          var message = "Could not deserialize the response body stream as " + typeof( T ).FullName + ".";
          throw new ApiException( message, (int) response.StatusCode, string.Empty, headers, exception );
        }
      }
    }

    private string ConvertToString( object value, System.Globalization.CultureInfo cultureInfo )
    {
      if( value == null )
      {
        return "";
      }

      if( value is System.Enum )
      {
        var name = System.Enum.GetName( value.GetType(), value );
        if( name != null )
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo( value.GetType() ).GetDeclaredField( name );
          if( field != null )
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute( field, typeof( System.Runtime.Serialization.EnumMemberAttribute ) )
                as System.Runtime.Serialization.EnumMemberAttribute;
            if( attribute != null )
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          var converted = System.Convert.ToString( System.Convert.ChangeType( value, System.Enum.GetUnderlyingType( value.GetType() ), cultureInfo ) );
          return converted == null ? string.Empty : converted;
        }
      }
      else if( value is bool )
      {
        return System.Convert.ToString( (bool) value, cultureInfo ).ToLowerInvariant();
      }
      else if( value is byte[] )
      {
        return System.Convert.ToBase64String( (byte[]) value );
      }
      else if( value.GetType().IsArray )
      {
        var array = System.Linq.Enumerable.OfType<object>( (System.Array) value );
        return string.Join( ",", System.Linq.Enumerable.Select( array, o => ConvertToString( o, cultureInfo ) ) );
      }

      var result = System.Convert.ToString( value, cultureInfo );
      return result == null ? "" : result;
    }
  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class Account
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerId" )]
    public int? CustomerId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountNumber" )]
    public string AccountNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountName" )]
    public string AccountName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "isSelected" )]
    public bool? IsSelected { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customer" )]
    public Customer Customer { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerUsers" )]
    public System.Collections.Generic.ICollection<CustomerUser> CustomerUsers { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "invoices" )]
    public System.Collections.Generic.ICollection<Invoice> Invoices { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "payments" )]
    public System.Collections.Generic.ICollection<Payment> Payments { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "statements" )]
    public System.Collections.Generic.ICollection<Statement> Statements { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "ticketComments" )]
    public System.Collections.Generic.ICollection<TicketComment> TicketComments { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "tickets" )]
    public System.Collections.Generic.ICollection<Ticket> Tickets { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class ActivityLog
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "ticketId" )]
    public int? TicketId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "createdDate" )]
    public System.DateTime? CreatedDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "logValue" )]
    public string LogValue { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "ticket" )]
    public Ticket Ticket { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class Admin
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "username" )]
    public string Username { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "password" )]
    public string Password { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "role" )]
    public string Role { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "email" )]
    public string Email { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "firstName" )]
    public string FirstName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "lastName" )]
    public string LastName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "status" )]
    public string Status { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "createdDate" )]
    public System.DateTime? CreatedDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "adminPermissions" )]
    public System.Collections.Generic.ICollection<AdminPermission> AdminPermissions { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "adminRegions" )]
    public System.Collections.Generic.ICollection<AdminRegion> AdminRegions { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "ticketComments" )]
    public System.Collections.Generic.ICollection<TicketComment> TicketComments { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "ticketNotes" )]
    public System.Collections.Generic.ICollection<TicketNote> TicketNotes { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "tickets" )]
    public System.Collections.Generic.ICollection<Ticket> Tickets { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class AdminPermission
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "adminId" )]
    public int AdminId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "viewInvoice" )]
    public bool ViewInvoice { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "updateInvoice" )]
    public bool UpdateInvoice { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "viewPayment" )]
    public bool ViewPayment { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "updatePayment" )]
    public bool UpdatePayment { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "viewStatement" )]
    public bool ViewStatement { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "updateStatement" )]
    public bool UpdateStatement { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "viewTicket" )]
    public bool ViewTicket { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "updateTicket" )]
    public bool UpdateTicket { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "viewCustomer" )]
    public bool ViewCustomer { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "updateCustomer" )]
    public bool UpdateCustomer { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "admin" )]
    public Admin Admin { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class AdminRegion
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "regionId" )]
    public int? RegionId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "adminId" )]
    public int? AdminId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "admin" )]
    public Admin Admin { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "region" )]
    public Region Region { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class AdminUserDTO
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "firstName" )]
    public string FirstName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "lastName" )]
    public string LastName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "password" )]
    public string Password { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "email" )]
    public string Email { get; set; }
     [System.Text.Json.Serialization.JsonPropertyName( "role" )]
    public string Role { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "status" )]
    public string Status { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "selectedRegions" )]
    public System.Collections.Generic.ICollection<int> SelectedRegions { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "adminId" )]
    public int AdminId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "viewInvoice" )]
    public bool ViewInvoice { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "updateInvoice" )]
    public bool UpdateInvoice { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "viewPayment" )]
    public bool ViewPayment { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "updatePayment" )]
    public bool UpdatePayment { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "viewStatement" )]
    public bool ViewStatement { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "updateStatement" )]
    public bool UpdateStatement { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "viewTicket" )]
    public bool ViewTicket { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "updateTicket" )]
    public bool UpdateTicket { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "viewCustomer" )]
    public bool ViewCustomer { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "updateCustomer" )]
    public bool UpdateCustomer { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class AmazonPaymentResponseViewDTO
  {

    [System.Text.Json.Serialization.JsonPropertyName( "command" )]
    public string Command { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "access_code" )]
    public string Access_code { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "merchant_identifier" )]
    public string Merchant_identifier { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "merchant_reference" )]
    public string Merchant_reference { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "amount" )]
    public double? Amount { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "currency" )]
    public string Currency { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "language" )]
    public string Language { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customer_email" )]
    public string Customer_email { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "signature" )]
    public string Signature { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "token_name" )]
    public string Token_name { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "fort_id" )]
    public int? Fort_id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "payment_option" )]
    public string Payment_option { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "sadad_olp" )]
    public string Sadad_olp { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "knet_ref_number" )]
    public string Knet_ref_number { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "third_party_transaction_number" )]
    public string Third_party_transaction_number { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "eci" )]
    public string Eci { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "order_description" )]
    public string Order_description { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customer_ip" )]
    public string Customer_ip { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customer_name" )]
    public string Customer_name { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "merchant_extra" )]
    public string Merchant_extra { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "merchant_extra1" )]
    public string Merchant_extra1 { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "merchant_extra2" )]
    public string Merchant_extra2 { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "merchant_extra3" )]
    public string Merchant_extra3 { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "merchant_extra4" )]
    public string Merchant_extra4 { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "merchant_extra5" )]
    public string Merchant_extra5 { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "authorization_code" )]
    public string Authorization_code { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "response_message" )]
    public string Response_message { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "response_code" )]
    public int? Response_code { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "status" )]
    public int? Status { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "card_holder_name" )]
    public string Card_holder_name { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "expiry_date" )]
    public int? Expiry_date { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "card_number" )]
    public string Card_number { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "remember_me" )]
    public string Remember_me { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "phone_number" )]
    public string Phone_number { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "settlement_reference" )]
    public string Settlement_reference { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "agreement_id" )]
    public string Agreement_id { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class ConfiguredCurrencies
  {

    [System.Text.Json.Serialization.JsonPropertyName( "merchantId" )]
    public System.Guid MerchantId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "currencyCode" )]
    public string CurrencyCode { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "conversionFactor" )]
    public double ConversionFactor { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class Customer
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "name" )]
    public string Name { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "email" )]
    public string Email { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "phoneNumber" )]
    public string PhoneNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "location" )]
    public string Location { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "password" )]
    public string Password { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "designation" )]
    public string Designation { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "status" )]
    public string Status { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "isMain" )]
    public bool? IsMain { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "region" )]
    public string Region { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accounts" )]
    public System.Collections.Generic.ICollection<Account> Accounts { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerUserCustomers" )]
    public System.Collections.Generic.ICollection<CustomerUser> CustomerUserCustomers { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerUserParents" )]
    public System.Collections.Generic.ICollection<CustomerUser> CustomerUserParents { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "invoices" )]
    public System.Collections.Generic.ICollection<Invoice> Invoices { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "payments" )]
    public System.Collections.Generic.ICollection<Payment> Payments { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "statements" )]
    public System.Collections.Generic.ICollection<Statement> Statements { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "tickets" )]
    public System.Collections.Generic.ICollection<Ticket> Tickets { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class CustomerContext
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "merchantReference" )]
    public string MerchantReference { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountId" )]
    public int? AccountId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountNumber" )]
    public string AccountNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountName" )]
    public string AccountName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerId" )]
    public int? CustomerId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "isMain" )]
    public bool? IsMain { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class CustomerUser
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "parentId" )]
    public int? ParentId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerId" )]
    public int? CustomerId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "parentAccountId" )]
    public int? ParentAccountId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customer" )]
    public Customer Customer { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "parent" )]
    public Customer Parent { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "parentAccount" )]
    public Account ParentAccount { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class CustomerUserDTO
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "name" )]
    public string Name { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "email" )]
    public string Email { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "phone" )]
    public string Phone { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "password" )]
    public string Password { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountName" )]
    public string AccountName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountNumber" )]
    public string AccountNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "designation" )]
    public string Designation { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "isActive" )]
    public bool IsActive { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class Invoice
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "transactionClass" )]
    public string TransactionClass { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "docNumber" )]
    public string DocNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "glDate" )]
    public System.DateTime? GlDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "trxDate" )]
    public System.DateTime? TrxDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "debit" )]
    public double? Debit { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "credit" )]
    public double? Credit { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerPartyId" )]
    public int? CustomerPartyId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "custTrxTypeId" )]
    public int? CustTrxTypeId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "refNo" )]
    public string RefNo { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountNumber" )]
    public string AccountNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountName" )]
    public string AccountName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "oldAccountId" )]
    public string OldAccountId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountId" )]
    public int? AccountId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerId" )]
    public int? CustomerId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "status" )]
    public string Status { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "dueDate" )]
    public System.DateTime? DueDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "account" )]
    public Account Account { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customer" )]
    public Customer Customer { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "invoiceStatuses" )]
    public System.Collections.Generic.ICollection<InvoiceStatus> InvoiceStatuses { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "invoicesPayments" )]
    public System.Collections.Generic.ICollection<InvoicesPayment> InvoicesPayments { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "payments" )]
    public System.Collections.Generic.ICollection<Payment> Payments { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "tickets" )]
    public System.Collections.Generic.ICollection<Ticket> Tickets { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class InvoiceRowDTO
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "transactionClass" )]
    public string TransactionClass { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "docNumber" )]
    public string DocNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "glDate" )]
    public System.DateTime? GlDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "trxDate" )]
    public System.DateTime? TrxDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "debit" )]
    public double? Debit { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "credit" )]
    public double? Credit { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerPartyId" )]
    public int? CustomerPartyId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "custTrxTypeId" )]
    public int? CustTrxTypeId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "refNo" )]
    public string RefNo { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountNumber" )]
    public string AccountNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountName" )]
    public string AccountName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "oldAccountId" )]
    public string OldAccountId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountId" )]
    public int? AccountId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerId" )]
    public int? CustomerId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "status" )]
    public string Status { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "dueDate" )]
    public System.DateTime? DueDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "region" )]
    public string Region { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "invoicesPayments" )]
    public System.Collections.Generic.ICollection<InvoicesPayment> InvoicesPayments { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class InvoicesPayment
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentId" )]
    public int? PaymentId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "invoiceId" )]
    public int? InvoiceId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "amountPaid" )]
    public double? AmountPaid { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "invoice" )]
    public Invoice Invoice { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "payment" )]
    public Payment Payment { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class InvoiceStatus
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "status" )]
    public string Status { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "invoiceId" )]
    public int? InvoiceId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "invoice" )]
    public Invoice Invoice { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class MerchantConfiguredPaymentGateway
  {

    [System.Text.Json.Serialization.JsonPropertyName( "pgid" )]
    public int Pgid { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "merchantID" )]
    public string MerchantID { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "gatewayOption" )]
    public string GatewayOption { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "sequence" )]
    public long Sequence { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "gatewayTitle" )]
    public string GatewayTitle { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "content" )]
    public string Content { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "tabName" )]
    public string TabName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "countryCode" )]
    public string CountryCode { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "currency" )]
    public string Currency { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "userId" )]
    public string UserId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentGatewayCurrencyId" )]
    public long PaymentGatewayCurrencyId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "createdDate" )]
    public System.DateTime CreatedDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "createdBy" )]
    public System.Guid CreatedBy { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "updatedBy" )]
    public System.Guid UpdatedBy { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "modifiedDate" )]
    public System.DateTime ModifiedDate { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class MerchantConfiguredPaymentGatewayListAPIResponse
  {

    [System.Text.Json.Serialization.JsonPropertyName( "code" )]
    public int Code { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "message" )]
    public string Message { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "entity" )]
    public System.Collections.Generic.ICollection<MerchantConfiguredPaymentGateway> Entity { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "errorDetails" )]
    public System.Collections.Generic.IDictionary<string, string> ErrorDetails { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class MerchantInvoiceReference
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "merchantReference" )]
    public string MerchantReference { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "invoiceNumer" )]
    public string InvoiceNumer { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class MerchantInvoiceReferenceDTO
  {

    [System.Text.Json.Serialization.JsonPropertyName( "merchantReference" )]
    public string MerchantReference { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "invoiceNumbers" )]
    public System.Collections.Generic.ICollection<string> InvoiceNumbers { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class OracleCustomerDTO
  {

    [System.Text.Json.Serialization.JsonPropertyName( "accountName" )]
    public string AccountName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountNumber" )]
    public string AccountNumber { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class Payment
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "invoiceId" )]
    public int? InvoiceId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentDate" )]
    public System.DateTime? PaymentDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "amount" )]
    public double? Amount { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "status" )]
    public string Status { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentMethod" )]
    public string PaymentMethod { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerId" )]
    public int? CustomerId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountId" )]
    public int? AccountId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountNumber" )]
    public string AccountNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountName" )]
    public string AccountName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "docNumber" )]
    public string DocNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "account" )]
    public Account Account { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customer" )]
    public Customer Customer { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "invoice" )]
    public Invoice Invoice { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "invoicesPayments" )]
    public System.Collections.Generic.ICollection<InvoicesPayment> InvoicesPayments { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class PaymentDTO
  {

    [System.Text.Json.Serialization.JsonPropertyName( "selectedInvoices" )]
    public System.Collections.Generic.ICollection<string> SelectedInvoices { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentAmount" )]
    public double? PaymentAmount { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentMethod" )]
    public string PaymentMethod { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountNumber" )]
    public string AccountNumber { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class PaymentGatewayDetails
  {

    [System.Text.Json.Serialization.JsonPropertyName( "merchantID" )]
    public System.Guid MerchantID { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "userID" )]
    public System.Guid UserID { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "gatewayOption" )]
    public string GatewayOption { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "gatewayContent" )]
    public string GatewayContent { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "sequence" )]
    public int Sequence { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "gatewayTitle" )]
    public string GatewayTitle { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "content" )]
    public string Content { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "token" )]
    public string Token { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "convertToBaseCurrency" )]
    public bool ConvertToBaseCurrency { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "tabName" )]
    public string TabName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "isAutoRefund" )]
    public bool IsAutoRefund { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "locationID" )]
    public int LocationID { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "createdBy" )]
    public System.Guid CreatedBy { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "updatedBy" )]
    public System.Guid UpdatedBy { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentGatewayId" )]
    public int PaymentGatewayId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "countryCode" )]
    public string CountryCode { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "currency" )]
    public string Currency { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentGatewayProperties" )]
    public System.Collections.Generic.IDictionary<string, string> PaymentGatewayProperties { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentGatewayCurrencies" )]
    public System.Collections.Generic.ICollection<string> PaymentGatewayCurrencies { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class PaymentGatewayDetailsListAPIResponse
  {

    [System.Text.Json.Serialization.JsonPropertyName( "code" )]
    public int Code { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "message" )]
    public string Message { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "entity" )]
    public System.Collections.Generic.ICollection<PaymentGatewayDetails> Entity { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "errorDetails" )]
    public System.Collections.Generic.IDictionary<string, string> ErrorDetails { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class PaymentGateways
  {

    [System.Text.Json.Serialization.JsonPropertyName( "pgid" )]
    public int Pgid { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentGatewayCode" )]
    public string PaymentGatewayCode { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentGatewayName" )]
    public string PaymentGatewayName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentType" )]
    public string PaymentType { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "bankName" )]
    public string BankName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "createdDate" )]
    public System.DateTime CreatedDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "createdBy" )]
    public System.Guid CreatedBy { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "updatedBy" )]
    public System.Guid UpdatedBy { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "modifiedDate" )]
    public System.DateTime ModifiedDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentGatewayCurrencies" )]
    public System.Collections.Generic.ICollection<string> PaymentGatewayCurrencies { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "storeName" )]
    public string StoreName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "gatewayOption" )]
    public string GatewayOption { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class PaymentGatewaysListAPIResponse
  {

    [System.Text.Json.Serialization.JsonPropertyName( "code" )]
    public int Code { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "message" )]
    public string Message { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "entity" )]
    public System.Collections.Generic.ICollection<PaymentGateways> Entity { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "errorDetails" )]
    public System.Collections.Generic.IDictionary<string, string> ErrorDetails { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class PaymentRequestView
  {

    [System.Text.Json.Serialization.JsonPropertyName( "merchantId" )]
    public System.Guid MerchantId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "gatewayOption" )]
    public string GatewayOption { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "gatewayId" )]
    public int GatewayId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "language" )]
    public string Language { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentType" )]
    public string PaymentType { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "userAgent" )]
    public string UserAgent { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "currencyCode" )]
    public string CurrencyCode { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "amount" )]
    public double Amount { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "orderId" )]
    public long OrderId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "channel" )]
    public string Channel { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "email" )]
    public string Email { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "mobile" )]
    public string Mobile { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerName" )]
    public string CustomerName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "token" )]
    public string Token { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "returnURL" )]
    public string ReturnURL { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "mode" )]
    public string Mode { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "responseArgs" )]
    public System.Collections.Generic.IDictionary<string, string> ResponseArgs { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentOption" )]
    public string PaymentOption { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "cardNumber" )]
    public string CardNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "custArgs" )]
    public System.Collections.Generic.IDictionary<string, string> CustArgs { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "description" )]
    public string Description { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "userId" )]
    public System.Guid UserId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "otp" )]
    public string Otp { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "uniqueOrderReference" )]
    public string UniqueOrderReference { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class PaymentResponseView
  {

    [System.Text.Json.Serialization.JsonPropertyName( "merchantId" )]
    public System.Guid MerchantId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "userId" )]
    public System.Guid UserId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "responseCode" )]
    public int ResponseCode { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "responseMessage" )]
    public string ResponseMessage { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "httpMethod" )]
    public string HttpMethod { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "postData" )]
    public string PostData { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "transactionId" )]
    public long TransactionId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "isSuccess" )]
    public bool IsSuccess { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "orderId" )]
    public long OrderId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "gatewayOption" )]
    public string GatewayOption { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentType" )]
    public string PaymentType { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "pgReferenceId" )]
    public string PgReferenceId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paidAmount" )]
    public double PaidAmount { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "status" )]
    public string Status { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentMessage" )]
    public System.Collections.Generic.IDictionary<string, string> PaymentMessage { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "cardBalance" )]
    public double CardBalance { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "tokenNumber" )]
    public string TokenNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "otpRefCode" )]
    public string OtpRefCode { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "cardNumber" )]
    public long CardNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "postURI" )]
    public string PostURI { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class PaymentResponseViewAPIResponse
  {

    [System.Text.Json.Serialization.JsonPropertyName( "code" )]
    public int Code { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "message" )]
    public string Message { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "entity" )]
    public PaymentResponseView Entity { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "errorDetails" )]
    public System.Collections.Generic.IDictionary<string, string> ErrorDetails { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class RefreshInvoiceDTO
  {

    [System.Text.Json.Serialization.JsonPropertyName( "accountNumber" )]
    public string AccountNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "invoices" )]
    public System.Collections.Generic.ICollection<Invoice> Invoices { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class RefreshPaymentDTO
  {

    [System.Text.Json.Serialization.JsonPropertyName( "accountNumber" )]
    public string AccountNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "payments" )]
    public System.Collections.Generic.ICollection<Payment> Payments { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class RefreshStatementDTO
  {

    [System.Text.Json.Serialization.JsonPropertyName( "accountNumber" )]
    public string AccountNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "statements" )]
    public System.Collections.Generic.ICollection<Statement> Statements { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class Region
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "region1" )]
    public string Region1 { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "adminRegions" )]
    public System.Collections.Generic.ICollection<AdminRegion> AdminRegions { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class RegisterDTO
  {

    [System.Text.Json.Serialization.JsonPropertyName( "name" )]
    public string Name { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountName" )]
    public string AccountName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountNumber" )]
    public string AccountNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "email" )]
    public string Email { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "password" )]
    public string Password { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "designation" )]
    public string Designation { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "mobileNumber" )]
    public string MobileNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "region" )]
    public string Region { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class Statement
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "transactionClass" )]
    public string TransactionClass { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "docNumber" )]
    public string DocNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "glDate" )]
    public System.DateTime? GlDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "trxDate" )]
    public System.DateTime? TrxDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "debit" )]
    public double? Debit { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "credit" )]
    public double? Credit { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerPartyId" )]
    public int? CustomerPartyId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "custTrxTypeId" )]
    public int? CustTrxTypeId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "refNo" )]
    public string RefNo { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountNumber" )]
    public string AccountNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountName" )]
    public string AccountName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "oldAccountId" )]
    public string OldAccountId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountId" )]
    public int? AccountId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerId" )]
    public int? CustomerId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "account" )]
    public Account Account { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customer" )]
    public Customer Customer { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class StringAPIResponse
  {

    [System.Text.Json.Serialization.JsonPropertyName( "code" )]
    public int Code { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "message" )]
    public string Message { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "entity" )]
    public string Entity { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "errorDetails" )]
    public System.Collections.Generic.IDictionary<string, string> ErrorDetails { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class StringStringDictionaryAPIResponse
  {

    [System.Text.Json.Serialization.JsonPropertyName( "code" )]
    public int Code { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "message" )]
    public string Message { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "entity" )]
    public System.Collections.Generic.IDictionary<string, string> Entity { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "errorDetails" )]
    public System.Collections.Generic.IDictionary<string, string> ErrorDetails { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class Ticket
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "description" )]
    public string Description { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "status" )]
    public string Status { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "ticketDate" )]
    public System.DateTime? TicketDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerId" )]
    public int? CustomerId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "invoiceId" )]
    public int? InvoiceId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "instumentType" )]
    public string InstumentType { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "issueType" )]
    public string IssueType { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "instrumentNumber" )]
    public int? InstrumentNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountId" )]
    public int? AccountId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "image" )]
    public string Image { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "adminId" )]
    public int? AdminId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "account" )]
    public Account Account { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "activityLogs" )]
    public System.Collections.Generic.ICollection<ActivityLog> ActivityLogs { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "admin" )]
    public Admin Admin { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customer" )]
    public Customer Customer { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "invoice" )]
    public Invoice Invoice { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "ticketComments" )]
    public System.Collections.Generic.ICollection<TicketComment> TicketComments { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "ticketFiles" )]
    public System.Collections.Generic.ICollection<TicketFile> TicketFiles { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "ticketNotes" )]
    public System.Collections.Generic.ICollection<TicketNote> TicketNotes { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class TicketComment
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "ticketId" )]
    public int? TicketId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "comment" )]
    public string Comment { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "createdDate" )]
    public System.DateTime? CreatedDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerAccountId" )]
    public int? CustomerAccountId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "adminId" )]
    public int? AdminId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "admin" )]
    public Admin Admin { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerAccount" )]
    public Account CustomerAccount { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "ticket" )]
    public Ticket Ticket { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class TicketDTO
  {

    [System.Text.Json.Serialization.JsonPropertyName( "issueType" )]
    public string IssueType { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "instrumentType" )]
    public string InstrumentType { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "instrumentNumbers" )]
    public System.Collections.Generic.ICollection<string> InstrumentNumbers { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "description" )]
    public string Description { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountNumber" )]
    public string AccountNumber { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "image" )]
    public string Image { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class TicketFile
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "fileName" )]
    public string FileName { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "encodedFile" )]
    public string EncodedFile { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "ticketId" )]
    public int? TicketId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "ticket" )]
    public Ticket Ticket { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class TicketNote
  {

    [System.Text.Json.Serialization.JsonPropertyName( "id" )]
    public int Id { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "notes" )]
    public string Notes { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "createdDate" )]
    public System.DateTime? CreatedDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "adminId" )]
    public int? AdminId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "ticketId" )]
    public int? TicketId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "admin" )]
    public Admin Admin { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "ticket" )]
    public Ticket Ticket { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class TransactionDetails
  {

    [System.Text.Json.Serialization.JsonPropertyName( "merchantId" )]
    public System.Guid MerchantId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "gatewayOption" )]
    public string GatewayOption { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paidAmount" )]
    public double PaidAmount { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "clientIP" )]
    public string ClientIP { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "responseCode" )]
    public string ResponseCode { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "userAgent" )]
    public string UserAgent { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "responseMessage" )]
    public string ResponseMessage { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "currencyCode" )]
    public string CurrencyCode { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "channel" )]
    public string Channel { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "transactionDate" )]
    public System.DateTime TransactionDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentType" )]
    public string PaymentType { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "pointsBurned" )]
    public int PointsBurned { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "bankCode" )]
    public string BankCode { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "pgReferenceId" )]
    public string PgReferenceId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "source" )]
    public string Source { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "gatewayId" )]
    public int GatewayId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "orderId" )]
    public long OrderId { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class TransactionDTO
  {

    [System.Text.Json.Serialization.JsonPropertyName( "transactionId" )]
    public int TransactionId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "transactionType" )]
    public string TransactionType { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "transactionAmount" )]
    public double? TransactionAmount { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "transactionDate" )]
    public System.DateTime? TransactionDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "customerId" )]
    public int? CustomerId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "accountId" )]
    public int? AccountId { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class TransactionInput
  {

    [System.Text.Json.Serialization.JsonPropertyName( "transactionId" )]
    public long TransactionId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "orderId" )]
    public long OrderId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "merchantId" )]
    public System.Guid MerchantId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "gatewayOption" )]
    public string GatewayOption { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paidAmount" )]
    public double PaidAmount { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "clientIP" )]
    public string ClientIP { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "userAgent" )]
    public string UserAgent { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "pgReferenceId" )]
    public string PgReferenceId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "responseMessage" )]
    public string ResponseMessage { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "responseCode" )]
    public string ResponseCode { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "currencyCode" )]
    public string CurrencyCode { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "channel" )]
    public string Channel { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "transactionDate" )]
    public System.DateTime TransactionDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "paymentType" )]
    public string PaymentType { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "pointsBurned" )]
    public int PointsBurned { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "bankCode" )]
    public string BankCode { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "source" )]
    public string Source { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "gatewayId" )]
    public int GatewayId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "status" )]
    public string Status { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "createdDate" )]
    public System.DateTime CreatedDate { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "updatedBy" )]
    public System.Guid UpdatedBy { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "isArchive" )]
    public bool IsArchive { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class TransactionInputAPIResponse
  {

    [System.Text.Json.Serialization.JsonPropertyName( "code" )]
    public int Code { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "message" )]
    public string Message { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "entity" )]
    public TransactionInput Entity { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "errorDetails" )]
    public System.Collections.Generic.IDictionary<string, string> ErrorDetails { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class TransactionInputListAPIResponse
  {

    [System.Text.Json.Serialization.JsonPropertyName( "code" )]
    public int Code { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "message" )]
    public string Message { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "entity" )]
    public System.Collections.Generic.ICollection<TransactionInput> Entity { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "errorDetails" )]
    public System.Collections.Generic.IDictionary<string, string> ErrorDetails { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class UpdateTransactionDetails
  {

    [System.Text.Json.Serialization.JsonPropertyName( "orderId" )]
    public int OrderId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "merchantId" )]
    public System.Guid MerchantId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "gatewayOption" )]
    public string GatewayOption { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "gatewayId" )]
    public int GatewayId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "pgReferenceId" )]
    public int PgReferenceId { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "responseMessage" )]
    public string ResponseMessage { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "responseCode" )]
    public string ResponseCode { get; set; }

  }

  [System.CodeDom.Compiler.GeneratedCode( "NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class WeatherForecast
  {

    [System.Text.Json.Serialization.JsonPropertyName( "date" )]
    public System.DateTime Date { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "temperatureC" )]
    public int TemperatureC { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "temperatureF" )]
    public int TemperatureF { get; set; }

    [System.Text.Json.Serialization.JsonPropertyName( "summary" )]
    public string Summary { get; set; }

  }



  [System.CodeDom.Compiler.GeneratedCode( "NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class ApiException : System.Exception
  {
    public int StatusCode { get; private set; }

    public string Response { get; private set; }

    public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

    public ApiException( string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException )
        : base( message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ( ( response == null ) ? "(null)" : response.Substring( 0, response.Length >= 512 ? 512 : response.Length ) ), innerException )
    {
      StatusCode = statusCode;
      Response = response;
      Headers = headers;
    }

    public override string ToString()
    {
      return string.Format( "HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString() );
    }
  }

  [System.CodeDom.Compiler.GeneratedCode( "NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))" )]
  public partial class ApiException<TResult> : ApiException
  {
    public TResult Result { get; private set; }

    public ApiException( string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException )
        : base( message, statusCode, response, headers, innerException )
    {
      Result = result;
    }
  }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603