@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer localizer
@using System.Text.Json
@using BillingPortalClient.Components;


@{
  Layout = "_Layout";
}
@model BillingPortalClient.ModelViews.PaymentViewModel;

<!-- CONTAINER -->
<div class="main-container container-fluid" style="margin-top:1%; padding-left:0; padding-right:0;">

  <!-- ROW-1 -->
  <div class="row widget-row">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xl-12">
      <div class="row">
        <div class="card-widget">
          <div class="card overflow-hidden">
            <div class="card-body c1">
              <div class="d-flex">
                <div class="">
                 <img src="../assets/images/dashboard/green-icon.png" />
                  <h6 class="text title">All <br />Reciepts</h6>
                  <h2 class="mb-0 number-font text">@Model.allReceiptsCount</h2>
                </div>

              </div>
              <span class="text-muted fs-12">
                <a href="@Url.Action("RefreshCustomerPayments","Payment")" class="btn btn-primary mt-2"><i
                    class="fe fe-refresh-cw"></i> Refresh</a>
              </span>
            </div>
          </div>
        </div>
        <div class="card-widget">
          <div class="card overflow-hidden">
            <div class="card-body c2">
              <div class="d-flex">
                <div class="">
                  <img src="../assets/images/dashboard/red-icon.png" />
                  <h6 class="text title">Paid Receipts</h6>
                  <h2 class="mb-0 number-font text">SAR @Model.sumReceiptsCount.ToString("N2")</h2>
                </div>

              </div>
              <span class="text-muted fs-12">
                <a href="@Url.Action("RefreshCustomerPayments","Payment")" class="btn btn-primary mt-2"><i
                    class="fe fe-refresh-cw"></i> Refresh </a>
              </span>
            </div>
          </div>
        </div>
        <div class="card-widget">
          <div class="card overflow-hidden">
            <div class="card-body c3">
              <div class="d-flex">
                <div class="">
                  <img src="../assets/images/dashboard/yellow-icon.png" />
                  <h6 class="text title">Recieved Receipts</h6>
                  <h2 class="mb-0 number-font text">SAR 584.00</h2>
                </div>

              </div>
              <span class="text-muted fs-12">
                <a href="@Url.Action("RefreshCustomerPayments","Payment")" class="btn btn-primary mt-2"><i
                    class="fe fe-refresh-cw"></i> Refresh </a>
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- ROW-1 END -->

  <!-- Row -->
  <div class="row row-sm">
    <div class="col-lg-12">
      <div class="card" style="margin-bottom:0px;">
        <div class="card-header" style="padding: 0px;border-bottom:none;display: block;margin-top: 20px;">
                  <div class="row" style="width: 100%;margin: 0 auto;padding-left: 0px;padding-right: 15px;">
                    <div class="col-md-4 col-sm-12" style="margin-right: 0px; margin-left: 0px; padding-right: 0px; padding-left: 0px;">
                      <h5 class="card-title" style="color:black;" id="accountNameDiv"><span>Showing details of</span> @Model.accountName</h5>
                     <h5 class="card-sub-title" style="color:black"><span>Account No: </span><span class="orange" id="accountNumberDiv">@Model.accountNumber</span></h5>
                    </div>
                    <div class="col-md-8 col-sm-12" style="margin-right: 0px; margin-left: 0px; padding-right: 0px; padding-left: 0px;">
                        <div class="row" style="justify-content: flex-end;">
                              <div class="search-container">
                                <input class="search" id="receiptNumberSelection" type="search" name="q" placeholder="Search">
                                <button class="btn searchbutton" for="searchright" onclick="toggleSearch()"><img src="../assets/images/dashboard/glass-icon.png"/></button>
                              </div>
                              <button class="btn filtering" onclick="filtermodal()"><i class="fa fa-filter"></i> Filters</button>
                             <div class="export-button-wrapper" onmouseleave="hideDownloadOptions()">
                                <button class="btn btn-export" id="exportButtonsDiv"><img onmouseover="showDownloadOptions()" src="../assets/images/dashboard/downinv.png" /></button>
                              
                              <div id="downloadOptions" style="display: none; position: absolute; z-index: 1; width: 75px; top: 0px;">
                                <button style="display: block;font-size: 12px;padding: 10px 15px;width: 75px;border: 0;position: absolute;top: 45px;" onclick="downloadPaymentReport('pdf')">PDF</button>
                                <button style="display: block;font-size: 12px;padding: 10px 15px;width: 75px;border: 0;position: absolute;top: 80px;" onclick="downloadPaymentReport('Excel')">Excel</button>
                              </div>
                              </div>
                          </div>
                        </div>
                    </div>
                  </div>
                   <div class="row" style="width:100%">
                        <div id="filters-div" class="justify-content-between align-items-center mt-2 mx-2">
                            <div class="clear-allfilters">
                                <label>Selected Filters</label>
                                <a href="#" id="clearAllFilters" class="clear-all-link">Clear All</a>
                            </div>
                            <div id="filterSelections"></div>
                         </div>
                    </div>
                  </div>
                </div>

        </div>
        <div class="card-body" style="padding-left:0px; padding-right:0px; padding-top:0px;">

          <div class="table-responsive">
            <table id="file-datatable" class="table table-bordered text-nowrap key-buttons border-bottom">
              <thead>
                <tr>
                  <th></th>
                  <th class="border-bottom-0" id="recieptNumberColumn">Receipt No.</th>
                  <th class="border-bottom-0" id="invoiceDateColumn">Date</th>
                  <th class="border-bottom-0">Account Name</th>
                  <th class="border-bottom-0">Invoice Number</th>
                  <th class="border-bottom-0" id="paymentModeColumn">Payment Mode</th>
                  <th class="border-bottom-0">Amount Paid</th>
                  <th class="border-bottom-0">Actions</th>
                </tr>
              </thead>
              <tbody>
                @if (@Model.paymentRows != null && @Model.paymentRows.Count > 0)
                {


                  foreach (var item in Model.paymentRows)
                  {
                    <tr id="@string.Format("tr{0}",item.id)" data-docNumber="@item.paymentRef" data-day="@item.paymentDate.Day"
                      data-month="@item.paymentDate.Month" data-year="@item.paymentDate.Year">
                      <td><input type="checkbox" id="@string.Format("{0}",item.id)" class="receiptsTableCheckbox" /></td>
                      <td><strong>@item.paymentRef</strong></td>
                      <td>@item.paymentDate.ToString("dd MMM, yyyy")</td>
                      <td>@item.accountName</td>
                      <td>@item.receiverBank</td>
                      <td>@item.paymentMode</td>
                      <td><strong>@item.paymentAmount</strong> SAR</td>
                      <td>
                       
                        <div class="download-button-wrapper" onmouseleave="hideDownloadROptions('@item.paymentRef')">
                          <button type="button" class="btn btn-success btn-ticket productButton"><img onmouseover="showDownloadROptions('@item.paymentRef')" src="../assets/images/dashboard/downinv.png" /></button>
                          <div id="downloadROption@(item.paymentRef)" style="display: none; position: absolute; z-index: 1; width: 75px; top: 0px;">
                                                        <button style="display: block;font-size: 12px;padding: 10px 15px;width: 75px;border: 0;position: absolute;top: 45px;" onclick="downloadRecieptReport('pdf', '@item.id')">PDF</button>
                                                        <button style="display: block;font-size: 12px;padding: 10px 15px;width: 75px;border: 0;position: absolute;top: 80px;" onclick="downloadRecieptReport('Excel', '@item.id')">Excel</button>
                          </div>
                        </div>
                      </td>
                    </tr>
                  }
                }

              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- End Row -->


</div>
<!-- CONTAINER CLOSED -->



<div class="modal fade" id="testModalCenter2" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered  modal-lg" role="document">
    <div class="modal-content">
      <button onclick="closeModal(this)" type="button" class="close" aria-label="Close" style="z-index:1999; position: absolute;top: 10px;right: 10px;border: none;color: #9398A5;background: #F5F6FA 0% 0% no-repeat padding-box;height: 30px;width: 30px;border-radius: 50px;font-size: 19px;">
        &times;
      </button>
      <div class="modal-body">

        <div class="container">
          <div class="row">
            <h1>Filters</h1>
          </div>
            <form id="filterForm">
              <div class="row mb-3">
                 <div class="panel" id="datePanel">
                   <div class="row mb-5">
              <div class="panel" id="datePanel">
                <div class="row mb-5">
                  <div class="col-md-12">
                    <label style="text-align:left; float:left;">Receipt Date</label>
                  </div>
                  <div class="col-md-6">
                    <input class="form-control" type="date" id="minDateSelection" />
                  </div>
                  <div class="col-md-6">
                    <input class="form-control" type="date" id="maxDateSelection" />
                  </div>
                </div>
              </div>
              <div class="panel" id="receiptNumberPanel">
                <div class="row mb-5">
                  <div class="col-md-12">
                    <label style="text-align:left; width:100%;">Payment Mode</label>
                                                  <span>
                                                      <input  class="form-control" type="radio" name="paymentMode" myid="online" value="" checked>
                                                      <label>Online</label>
                                                  </span>
                                                  <span>
                                                      <input class="form-control" type="radio" name="paymentMode" myid="offline" value="">
                                                      <label>Offline</label>
                                                  </span>
                  
                  
                  </div>
                </div>
              </div>
            </div>
            <div class="row">
                <div class="col-md-12 text-center">
                  <button type="submit"id="applyFilterButton" class="btn" style="width:100%;">Apply Filter</button>
                </div>
              </div>
          </form>

        </div>

      </div>

    </div>
  </div>
</div>


<div class="modal" id="downloadProgressModal" tabindex="-1" role="dialog" aria-labelledby="downloadProgressModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
 <button onclick="closeModal(this)" type="button" class="close" aria-label="Close" style="z-index:1999; position: absolute;top: 10px;right: 10px;border: none;color: #9398A5;background: #F5F6FA 0% 0% no-repeat padding-box;height: 30px;width: 30px;border-radius: 50px;font-size: 19px;">
        &times;
      </button>
      <div class="modal-header">
        <h1 class="modal-title" style="color: #191616; font-size:24px;" id="downloadProgressModalLabel">Please Wait</h1>
      </div>
      <div class="modal-body">
        <span style="color:#191616">Download is in progress...</span>
      </div>
    </div>
  </div>
</div>


<script>

 function closeModal(btn) {
    selectedRows = [];
    // Find the closest modal
    var modal = $(btn).closest('.modal');
    console.log("Button clicked:", btn); // Log the button element
    console.log("Modal found:", modal); // Log the modal element
     $('#file-datatable').find('input[type="checkbox"]').prop('checked', false);
    // Close the found modal
    $(modal).modal('hide');
  }

  function updateFileName(input) {
    var fileName = input.files[0].name;
    document.getElementById('fileName').innerText = 'Selected file: ' + fileName;
  }

 // let selectedRows = [];
  let selectedFilters = [];
  var selectedPaymentMode="online";

  var filterData = {
    name: getFilterName(),
    value: getFilterValue()
  };

  var model = @Html.Raw(JsonSerializer.Serialize(Model));

  $("#minDateSelection").val("");
  $("#maxDateSelection").val("");
  $('input[name="paymentMode"]:checked').prop('checkedd', false);


    $(document).ready(function () {
        console.log('*******************************************');
    }); 

     if (!$.fn.DataTable.isDataTable('#file-datatable')) {
        table = $("#file-datatable").DataTable({
            // ... (your existing DataTable configuration)
            drawCallback: function () {
                var minRecieptDate = new Date($("#minDateSelection").val());
                var maxRecieptDate = new Date($("#maxDateSelection").val());
                var recieptNumberFilter = $("#receiptNumberSelection").val().toLowerCase();
                selectedPaymentMode= $('input[name="paymentMode"]:checked').attr('myid').toLowerCase();
                if (selectedPaymentMode === '' || selectedPaymentMode === undefined){
                  selectedPaymentMode = "online"
                }
                this.api().rows().every(function (rowIdx, tableLoop, rowLoop) {
                    var data = this.data();
                    var recieptNumber = data[1].toLowerCase();
                    var recieptDate = new Date(data[2]);
                    var paymentMode = data[5].toLowerCase();
                 
                    if (
                        (!isNaN(minRecieptDate) && recieptDate < minRecieptDate) ||
                        (!isNaN(maxRecieptDate) && recieptDate > maxRecieptDate) ||
                        (recieptNumber !== '' && !recieptNumber.includes(recieptNumberFilter)) ||
                        (selectedPaymentMode !== undefined && paymentMode !== selectedPaymentMode)
                    ) {
                        $(this.node()).css("display", "none");
                    } else {
                        $(this.node()).css("display", "");
                    }
                });
            },
        });
    }


$('#testModalCenter1').on('hidden.bs.modal', function (e) {
      $('#ticketViewModel_instrumentNumbers').val(null).trigger('change');
      // Your code to execute when the modal is closed
    });

  $("#filterForm").on("submit", function (event) {
        event.preventDefault();
        $("#filters-div").show();
        displaySelectedFilters();
        if (table) {
            table.rows().invalidate().draw();
            // table.page('first').draw('page');
            table.search('').draw();
        } else {
            console.log("Table is not defined");
        }
        $("#testModalCenter2").modal("hide");
  });

  $("#receiptNumberSelection").on("keyup", function () {
        if (table) {
            table.search(this.value).draw();
        } else {
            console.log("Table is not defined");
        }
  });

    $("#clearAllFilters").on("click", function (e) {
		// Clear the form first
		$("#testModalCenter2 #filterForm")[0].reset();
		// Then clear selectedFilters
		selectedFilters = [];
		// Finally, display selected filters and redraw the DataTable
		displaySelectedFilters();
		table.draw(); // Clear DataTable
		table.page('first').draw('page');
		$("#filters-div").hide();
		e.preventDefault();
	});
 
 function filtermodal() {
    // Show the filter modal (replace with your actual modal code)
    $("#testModalCenter2").modal('show');
    
  }  

// Function to determine the label based on the selected filters
function getFilterName() {
    // Check the selected filter criteria and set the label accordingly
     var paymentModeChecked = $('input[name="paymentMode"]:checked');
    if ($("#minDateSelection").val() || $("#maxDateSelection").val()) {
        return "Reciept Date";
     } else if (paymentModeChecked.length > 0) {
        return "Payment Mode";
    }
    // Return an empty string if no specific filter is applied
    return "";
}


function formatDate(inputDate) {
    const date = new Date(inputDate);
    const day = date.getDate();
    const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    const month = monthNames[date.getMonth()];
    const year = date.getFullYear();

    const formattedDate = `${day}${ordinalSuffix(day)} ${month} ${year}`;
    return formattedDate;
}

function ordinalSuffix(day) {
    if (day >= 11 && day <= 13) {
        return 'th';
    }
    switch (day % 10) {
        case 1:
            return 'st';
        case 2:
            return 'nd';
        case 3:
            return 'rd';
        default:
            return 'th';
    }
}

function getFilterValue(filterName) {
    var minDate = $("#minDateSelection").val();
    var maxDate = $("#maxDateSelection").val();
    var paymentMode = $('input[name="paymentMode"]:checked').attr('myid');

    // Construct the filter value based on the selected filter name
    switch (filterName) {
        case "Reciept Date":
             return minDate && maxDate ? `From: ${formatDate(minDate)} To ${formatDate(maxDate)}` : null;
         case "Payment Mode":
            return paymentMode ? `${paymentMode}` : null;
        default:
            return null;
    }
}



function displaySelectedFilters() {
    var filterSelections = $("#filterSelections");
    var filterLabel = $("#filterLabel");

    // Clear previous filter selections
    filterSelections.empty();

    // Get values from the modal input fields
    var minDate = $("#minDateSelection").val();
    var maxDate = $("#maxDateSelection").val();
    var recieptNumber = $("#receiptNumberSelection").val();
    var paymentMode = $('input[name="paymentMode"]:checked').attr('myid');;


    // Check if at least one filter value is provided
    if (minDate || maxDate || paymentMode) {
        filterLabel.show();

        // Create a div for each selected filter
        var filterNames = ["Reciept Date", "Payment Mode"];

        filterNames.forEach(function (filterName) {
            var filterValue = getFilterValue(filterName);

            if (filterValue) {
                var filterDiv = $("<div>", {
                    class: "filter-selection",
                });

                // Create a label for filter name only if filter value is not null or empty
                var filterNameLabel = $("<label>", {
                    class: "filter-label",
                    text: filterName + ": ",
                });

                // Create a span for filter value
                var filterValueSpan = $("<span>", {
                    class: "filter-value",
                    text: filterValue,
                });

               // Create a cross icon to remove the filter
                var crossIcon = $("<i>", {
                    class: "fa fa-times cross-icon",
                }).on("click", function () {
                    // Remove the filter div
                    filterDiv.remove();
                   

                   // Get the filter name from the parent filter selection
                   var clickedFilterName = $(this).siblings('.filter-label').text().replace(": ", "").trim();

                   // Remove the filter div
                   let currentbox = $(this).closest('.filter-selection');
                   currentbox.remove();

                  // Clear the corresponding modal input fields based on the filter type
                  switch (filterName) {
                      case "Reciept Date":
                          $("#minDateSelection, #maxDateSelection").val("");
                          break;
                      case "Payment Mode":
                          $('input[name="paymentMode"]').prop('checked', false);
                          break;
                      default:
                          break;
                  }
                 
                  
                   // Remove the filter and update the display
                    selectedFilters = selectedFilters.filter((item) => item.name !== filterName);

                    // Check if displaySelectedFilters is being called
                    displaySelectedFilters();

                    if (table) {
                        table.rows().invalidate().draw();
                        table.page('first').draw('page');
                    } else {
                        console.log("Table is not defined");
                    }
                });


                // Append elements to the filterDiv
                filterDiv.append(filterNameLabel).append(filterValueSpan).append(crossIcon);

                // Append the filterDiv to filterSelections
                filterSelections.append(filterDiv);
            }
        });
        // Show the filterSelections container
        filterSelections.show();
    } else {
        // If no filters are selected, hide the filter selections container
        filterLabel.hide();
        filterSelections.hide();
        // Hide Filter Div
			$("#filters-div").hide();
    }
}

if (table != undefined && table != null) {
    table.destroy();
}

var selectedRows = [];

// Handle checkbox clicks
$(document).on("change", ".receiptsTableCheckbox", function () {
  var docNumber = $(this).closest("tr").attr("data-docNumber");
  if ($(this).prop("checked")) {
    // If checkbox is checked, add the document number to the array
    selectedRows.push(docNumber);
  } else {
    // If checkbox is unchecked, remove the document number from the array
    var index = selectedRows.indexOf(docNumber);
    if (index !== -1) {
      selectedRows.splice(index, 1);
    }
  }
});

$(document).on("change", ".receiptsTableCheckbox", function (event) {
    var itemId = event.target.id; // Get the item ID from the checkbox
    var isChecked = $(this).prop("checked");
    var selectedRow = model.paymentRows.find(x => x.TransactionNumber == itemId); // Find the selected row using the item ID
    console.log("SelectedRow", selectedRow);
    var index = selectedRows.indexOf(itemId); // Find the index of the item ID in selectedRows
    if (isChecked) {
        if (index === -1) {
            // Add the item ID to the selectedRows array if it's not already present
            selectedRows.push(itemId);
            console.log("selectedRows", selectedRows);
        }

        // Update selected invoices count in UI
        updateSelectedReceiptsCount();
    } else {

        if (index !== -1) {
            selectedRows.splice(index, 1); // Remove the item ID from the selectedRows array
            console.log("selectedRows", selectedRows);
            updateSelectedReceiptsCount();
        }
    }
    // Iterate through each checkbox to remove unchecked items from selectedRows
    $(".receiptTableCheckbox").each(function() {
        var itemId = $(this).prop("id");
        var isChecked = $(this).prop("checked");
        var index = selectedRows.indexOf(itemId);
        if (!isChecked && index !== -1) {
            selectedRows.splice(index, 1);
            console.log("selectedRows", selectedRows);
            updateSelectedReceiptsCount();
        }
    });
});




function updateSelectedReceiptsCount() {
    $("#selectedReceiptsCount").text(selectedRows.length);
    $("#selectedReceiptsCountSummary").text(selectedRows.length);
}


  function toggleSearch() {
        var searchContainer = document.querySelector('.search-container');
        var searchInput = document.querySelector('.search');
        
        // Toggle the 'expanded' class
        searchContainer.classList.toggle('expanded');
        
        // If expanded, focus on the search input
        if (searchContainer.classList.contains('expanded')) {
            searchInput.focus();
        }
    }

function showDownloadOptions() {
    document.getElementById("downloadOptions").style.display = "block";
}
function hideDownloadOptions() {
    document.getElementById("downloadOptions").style.display = "none";
}
function showDownloadROptions(itemId) {
 document.getElementById('downloadROptions' + itemId).style.display = 'block';
}
function hideDownloadROptions(itemId) {
   document.getElementById('downloadROptions' + itemId).style.display = 'none';
}

function convertBase64ToPDF(base64String, filename) {
    try {
        // Decode base64 string to binary data
        const binaryString = atob(base64String);
        
        // Convert binary string to array buffer
        const arrayBuffer = new ArrayBuffer(binaryString.length);
        const uint8Array = new Uint8Array(arrayBuffer);
        for (let i = 0; i < binaryString.length; i++) {
            uint8Array[i] = binaryString.charCodeAt(i);
        }
        
        // Convert array buffer to base64 encoded PDF
        const pdfDataUri = 'data:application/pdf;base64,' + btoa(String.fromCharCode.apply(null, uint8Array));
        // Create a new document
        const newWindow = window.open();
        newWindow.document.open();
        
        // Write the PDF content to the document
        newWindow.document.write('<iframe width="100%" height="100%" src="' + pdfDataUri + '"></iframe>');
        
        newWindow.document.close();
        // Trigger download
        // const link = document.createElement('a');
        // link.href = pdfDataUri;
        // link.download = filename;
        // document.body.appendChild(link);
        // link.click();
        // document.body.removeChild(link);
    } catch (error) {
        console.error('Error converting base64 to PDF:', error);
    }
}




function convertBase64ToExcel(base64String, filename) {
      try {
        // Decode base64 string to binary data
        const binaryString = atob(base64String);
        
        // Convert binary string to array buffer
        const arrayBuffer = new ArrayBuffer(binaryString.length);
        const uint8Array = new Uint8Array(arrayBuffer);
        for (let i = 0; i < binaryString.length; i++) {
            uint8Array[i] = binaryString.charCodeAt(i);
        }
        
        // Convert array buffer to base64 encoded Excel file
        const excelDataUri = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,' + btoa(String.fromCharCode.apply(null, uint8Array));
        const link = document.createElement('a');
        link.href = excelDataUri;
        link.download = filename;
        link.click();
    } catch (error) {
        console.error('Error converting base64 to Excel:', error);
    }
    
}

function downloadPaymentReport(attachmentType) {
    var buId = '@Model.businessUnitId';
    var startDate = "12-04-2000";
    var endDate = new Date().toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' }).replace(/\//g, '-');
    var customerAccountNumber = '@Model.accountNumber';

    // Show the download in progress message
    showDownloadInProgressMessage();

    // Call your controller action to initiate the API call
    $.ajax({
        url: '/Invoice/DownloadInvoiceReport',
        type: 'POST',
        data: {
            buId: buId,
            startDate: startDate,
            endDate: endDate,
            attachmentType: attachmentType,
            customerAccountNumber: customerAccountNumber
        },
        success: function(response) {
            if (response.result === "Success") {
                hideDownloadInProgressMessage();
                // Convert base64 data to file and download
                if (attachmentType === "pdf") {
                    convertBase64ToPDF(response.data, customerAccountNumber+'.pdf');
                } else if (attachmentType === "excel") {
                    convertBase64ToExcel(response.data, customerAccountNumber+'.xlsx');
                }
            } else {
                alert("Error: " + response.message);
            }
        },
        error: function(xhr, status, error) {
            console.error("Error:", error);
            alert("An error occurred while downloading the report.");
        }
    });
}

function downloadRecieptReport(attachmentType, transactionNumber) {
    var buId = '@Model.businessUnitId';
    var customerAccountNumber = '@Model.accountNumber';

    // Show the download in progress message
    showDownloadInProgressMessage();

    // Call your controller action to initiate the API call
    $.ajax({
        url: '/Invoice/DownloadReceiptReport',
        type: 'POST',
        data: {
            buId :buId,
            attachmentType : attachmentType,
            customerAccountNumber : customerAccountNumber,
            transactionType :"Corporate",
            transactionNumber : transactionNumber
        },
        success: function(response) {
            if (response.result === "Success") {
                hideDownloadInProgressMessage();
                // Convert base64 data to file and download
                if (attachmentType === "pdf") {
                    convertBase64ToPDF(response.data, transactionNumber+'.pdf');
                } else if (attachmentType === "excel") {
                    convertBase64ToExcel(response.data, transactionNumber+'.xlsx');
                }
            } else {
                alert("Error: " + response.message);
            }
        },
        error: function(xhr, status, error) {
            console.error("Error:", error);
            alert("An error occurred while downloading the report.");
        }
    });
}

function showDownloadInProgressMessage() {
    // Assuming you have a div or some element to show the message
    $('#downloadProgressModal').modal('show');
}

function hideDownloadInProgressMessage() {
    // Hide the download progress message
     $('#downloadProgressModal').modal('hide');
}

</script>
