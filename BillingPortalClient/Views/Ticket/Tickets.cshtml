@{
  Layout = "_Layout";
}
@model BillingPortalClient.ModelViews.TicketViewModel
<script>


function addReceiptsForTicket() {
  $("#testModalCenter1").modal('show');     
}

function filtermodal(){
  $("#testModalCenter2").modal('show');
}

$(document).ready(function () {



let selectedRows = [];

var instrumentTypeCriteria = "allTickets";
$.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
    var trNode = data[3];
    // Check if instrument type criteria is "allTickets"
    if (instrumentTypeCriteria == "allTickets") {
        return true;
    }
    // Check if the instrument type attribute matches the criteria
    if (trNode.getAttribute("data-InstrumentTypeAttribute").toLowerCase() == instrumentTypeCriteria) {
        return true;
    }
    // If no match found, return false
    return false;
});

function headerWidgetButtonClick(instrumentType)
{
  instrumentTypeCriteria = instrumentType;
  var table = $('#file-datatable').DataTable();
  if (table) {
                        table.rows().invalidate().draw();
                        table.search('').draw('page');
                    } else {
                        console.log("Table is not defined");
                    }
}

 $.fn.dataTable.ext.search.push(function(settings, data, dataIndex) {
    var status = data[6]; // Use the index of the Status column
    if (statusCriteria === "all" || statusCriteria === status) {
      return true;
    }
    return false;
  });

// Ensure statusCriteria is defined in the correct scope
var statusCriteria = "all"; 

$(document).on("click", ".statusCriteriaButton", function (event) {
  console.log("Button clicked: ", event.target.id); // Log the ID of the clicked element

  // Check which button was clicked and set the statusCriteria accordingly
  switch (event.target.id) {
    case "allStatusRadio":
      statusCriteria = "all";
      break;
    case "openStatusRadio":
      statusCriteria = "Open";
      break;
    case "inprogressStatusRadio":
      statusCriteria = "Inprogress";
      break;
    case "closedStatusRadio":
      statusCriteria = "Closed";
      break;
    default:
      console.log("Unknown button clicked");
      return; // Exit if the clicked element is not recognized
  }

  console.log("Selected statusCriteria: ", statusCriteria); // Log the selected statusCriteria

  // Update and redraw the DataTable
  var table = $('#file-datatable').DataTable();
  if (table) {
    table.rows().invalidate().draw();
    table.search('').draw('page');
  } else {
    console.log("Table is not defined");
  }
});

       

// $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
//   var trNode = data[6];
//   var statusAttribute = trNode.getAttribute("data-StatusAttribute");

//   if (statusCriteria == "all" || statusAttribute == statusCriteria) {
//     var searchSelectBoxValue = $("#searchSelectBox").val();

//     if (searchSelectBoxValue == "") {
//       return true;
//     }

//     if (searchSelectBoxValue == "issueType" || searchSelectBoxValue == "instrumentType") {
//       var searchAttributeValue = trNode.getAttribute("data-" + capitalizeFirstLetter(searchSelectBoxValue) + "Attribute").toLowerCase();
//       var inputValue = $("#" + searchSelectBoxValue + "Selection").val().toLowerCase();
//       return searchAttributeValue.includes(inputValue);
//     }

//     if (searchSelectBoxValue == "createdOn") {
//       var minDate = new Date($("#minDateSelection").val()) || new Date(0000, 00, 00);
//       var maxDate = new Date($("#maxDateSelection").val()) || new Date(9999, 12, 30);
//       var ticketDate = new Date(trNode.getAttribute("data-year"), Number(trNode.getAttribute("data-month")) - 1, trNode.getAttribute("data-day"));
//       return ticketDate >= minDate && ticketDate <= maxDate;
//     }
//   }

//   return false;
// });

let selectedFilters = [];

 var table = $("#file-datatable").DataTable();
    function applyDateFilter() {
            var minInvoiceDate = new Date($("#minDateSelection").val());
            var maxInvoiceDate = new Date($("#maxDateSelection").val());
            var instrumentType = $("#instrumenttype").val().toLowerCase();
            var issueType = $("#issuetype").val().toLowerCase();

            table.rows().every(function (rowIdx, tableLoop, rowLoop) {
                var data = this.data();
                var invoiceDate = new Date(data[5]);
                var DatainstrumentType = data[3].toLowerCase();
                var DataissueType = data[4].toLowerCase();

                if ((!isNaN(minInvoiceDate) && invoiceDate < minInvoiceDate) ||
                    (!isNaN(maxInvoiceDate) && invoiceDate > maxInvoiceDate) ||
                    (instrumentType !== "" && DatainstrumentType !== instrumentType) ||
                    (issueType !== "" && DataissueType !== issueType)) 
                    {
                    $(this.node()).hide();
                } else {
                    $(this.node()).show();
                }
            });
        }

        table.on('draw', function () {
            applyDateFilter();
        });

        $('#filterForm').submit(function (e) {
            e.preventDefault();
            $("#filters-div").show();
            $('#testModalCenter2').modal('hide');
            applyDateFilter();
            displaySelectedFilters();
        });
        
        $("#clearAllFilters").on("click", function (e) {
          // Clear the form first
          $("#testModalCenter2 #filterForm")[0].reset();
          $('#filterForm').find(':input').val('');
          // Then clear selectedFilters
          selectedFilters = [];
          // Finally, display selected filters and redraw the DataTable
          displaySelectedFilters();
          $("#filters-div").hide();
          applyDateFilter();
          e.preventDefault();
        });

        $('#searchright').on('keyup', function () {
            table.search(this.value).draw();
        });

var filterData = {
    name: getFilterName(),
    value: getFilterValue()
};

  $("#minDateSelection").val("");
  $("#maxDateSelection").val("");
  $("#instrumenttype").val("");
  $("#issuetype").val("");

// Function to determine the label based on the selected filters
function getFilterName() {
    // Check the selected filter criteria and set the label accordingly
    if ($("#minDateSelection").val() || $("#maxDateSelection").val()) {
        return "Ticket Date";
    } else if ($("#instrumenttype").val()) {
        return "Instrument Type";
    } else if ($("#issuetype").val()) {
        return "Issue Type";
    }
    // Return an empty string if no specific filter is applied
    return "";
}

function formatDate(inputDate) {
    const date = new Date(inputDate);
    const day = date.getDate();
    const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    const month = monthNames[date.getMonth()];
    const year = date.getFullYear();
    const formattedDate = `${day}${ordinalSuffix(day)} ${month} ${year}`;
    return formattedDate;
}

function ordinalSuffix(day) {
    if (day >= 11 && day <= 13) {
        return 'th';
    }
    switch (day % 10) {
        case 1:
            return 'st';
        case 2:
            return 'nd';
        case 3:
            return 'rd';
        default:
            return 'th';
    }
}

function getFilterValue(filterName) {
    var minDate = $("#minDateSelection").val();
    var maxDate = $("#maxDateSelection").val();
    var instrumentType = $("#instrumenttype").val();
    var issueType = $("#issuetype").val();
    // Construct the filter value based on the selected filter name
    switch (filterName) {
        case "Ticket Date":
           return minDate && maxDate ? `From: ${formatDate(minDate)} To ${formatDate(maxDate)}` : null;
         case "Instrument Type":
            return instrumentType ? `${instrumentType}` : null;
           case "Issue Type":
            return issueType ? `${issueType}` : null;
        default:
            return null;
    }
}

function displaySelectedFilters() {
    var filterSelections = $("#filterSelections");
    var filterLabel = $("#filterLabel");
    // Clear previous filter selections
    filterSelections.empty();
    // Get values from the modal input fields
    var minDate = $("#minDateSelection").val();
    var maxDate = $("#maxDateSelection").val();
    var instrumentType = $("#instrumenttype").val();
    var issueType = $("#issuetype").val();
    // Check if at least one filter value is provided
    if (minDate || maxDate || instrumentType || issueType) {
        filterLabel.show();
        // Create a div for each selected filter
        var filterNames = ["Ticket Date", "Instrument Type", "Issue Type"];
        filterNames.forEach(function (filterName) {
            var filterValue = getFilterValue(filterName);

            if (filterValue) {
                var filterDiv = $("<div>", {
                    class: "filter-selection",
                });
                // Create a label for filter name only if filter value is not null or empty
                var filterNameLabel = $("<label>", {
                    class: "filter-label",
                    text: filterName + ": ",
                });
                // Create a span for filter value
                var filterValueSpan = $("<span>", {
                    class: "filter-value",
                    text: filterValue,
                });
               // Create a cross icon to remove the filter
                var crossIcon = $("<i>", {
                    class: "fa fa-times cross-icon",
                }).on("click", function () {
                    // Remove the filter div
                    filterDiv.remove();
                   // Get the filter name from the parent filter selection
                   var clickedFilterName = $(this).siblings('.filter-label').text().replace(": ", "").trim();
                   // Remove the filter div
                   let currentbox = $(this).closest('.filter-selection');
                   currentbox.remove();
                  // Clear the corresponding modal input fields based on the filter type
                  switch (filterName) {
                      case "Ticket Date":
                          $("#minDateSelection, #maxDateSelection").val("");
                          break;
                       case "Instrument Type":
                         $("#instrumenttype").val("");
                          break;
                       case "Issue Type":
                          $("#issuetype").val("");
                          break;
                      default:
                          break;
                  }

                 // Remove the filter and update the display
                    selectedFilters = selectedFilters.filter((item) => item.name !== filterName);

                    // Check if displaySelectedFilters is being called
                    displaySelectedFilters();

                    if (table) {
                        table.rows().invalidate().draw();
                        table.search('').draw('page');
                    } else {
                        console.log("Table is not defined");
                    }
                });
                // Append elements to the filterDiv
                filterDiv.append(filterNameLabel).append(filterValueSpan).append(crossIcon);
                // Append the filterDiv to filterSelections
                filterSelections.append(filterDiv);                
            }
            
        });
        // Show the filterSelections container
        filterSelections.show();
                        
    } else {
        // If no filters are selected, hide the filter selections container
        filterLabel.hide();
        filterSelections.hide();
        // Hide Filter Div
		$("#filters-div").hide();
    }
}

});



function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

</script>



 <!-- CONTAINER -->
<div class="main-container container-fluid" style="margin-top:1%; padding-left:0; padding-right:0;">             

    <!-- ROW-1 -->
    <div class="row widget-row">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xl-12">
            <div class="row">
                <div class="card-widget">
                    <div class="card overflow-hidden">
                        <div class="card-body c1">
                            <div class="d-flex">
                                <div class="">
                                    <h6 class="text title text-white">All Ticket</h6>
                                     <img src="../assets/images/dashboard/green-icon.png" />
                                    <h2 class="mb-0 number-font text">@Model.allTicketsCount</h2>
                                </div>
                            </div>
                            <span class="text-muted fs-12">
                                <button onclick="headerWidgetButtonClick('allTickets')"  class="btn btn-primary mt-2"> View All </button>
                              </span>
                        </div>
                    </div>
                </div>
                <div class="card-widget">
                    <div class="card overflow-hidden">
                        <div class="card-body c2">
                            <div class="d-flex">
                                <div class="">
                                    <h6 class="text title text-white">Invoice Tickets</h6>
                                     <img src="../assets/images/dashboard/red-icon.png" />
                                    <h2 class="mb-0 number-font text">@Model.invoiceTicketsCount</h2>
                                </div>
                               
                            </div>
                            <span class="text-muted fs-12">
                                <button onclick="headerWidgetButtonClick('invoice')" class="btn btn-primary mt-2"> View All </button>
                              </span>
                        </div>
                    </div>
                </div>
                <div class="card-widget">
                    <div class="card overflow-hidden">
                        <div class="card-body c3">
                            <div class="d-flex">
                                <div class="">
                                    <h6 class="text title text-white">Statement Tickets</h6>
                                    <img src="../assets/images/dashboard/yellow-icon.png" />
                                    <h2 class="mb-0 number-font text">@Model.statementTicketsCount</h2>
                                </div>
                               
                            </div>
                            <span class="text-muted fs-12">
                                <button onclick="headerWidgetButtonClick('statement')" class="btn btn-primary mt-2"> View All </button>
                              </span>
                        </div>
                    </div>
                </div>
                <div class="card-widget">
                    <div class="card overflow-hidden">
                        <div class="card-body c4">
                            <div class="d-flex">
                                <div class="">
                                
                                    <h6 class="text title text-white">Receipt Tickets</h6>
                                    <img src="../assets/images/dashboard/blue-icon.png" />
                                    <h2 class="mb-0 number-font text">@Model.receiptTicketsCount</h2>
                                </div>
                               
                            </div>
                            <span class="text-muted fs-12">
                                <button onclick="headerWidgetButtonClick('receipt')" class="btn btn-primary mt-2"> View All </button>
                              </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- ROW-1 END -->

     <!-- Row -->
<<div class="row row-sm">
    <div class="col-lg-12">
        <div class="card" style="margin-bottom:0px;">
            <div class="card-header" style="padding: 0px;border-bottom:none;display: block;margin-top: 20px;">
              
                <div class="row" style="width: 100%;margin: 0 auto;padding-left: 0px;padding-right: 15px;">
                    <div class="col-md-4 col-sm-12" style="margin-right: 0px; margin-left: 0px; padding-right: 0px; padding-left: 0px;">
                     <div class="btn-group" role="group" aria-label="Basic radio toggle button group">
     
                          <input type="radio" class="btn-check" name="btnradio" id="btnradio1"  autocomplete="off" checked>
                          <label class="btn statusCriteriaButton" for="btnradio1" id="allStatusRadio"
                            style="border-top:0px; border-right:0px; border-left:0px; border-bottom-width:thick; border-radius:0px; color:black;">All(@Model.allTicketsCount)</label>

                          <input type="radio" class="btn-check" name="btnradio" id="btnradio2"  autocomplete="off">
                          <label class="btn statusCriteriaButton" for="btnradio2" id="openStatusRadio"
                            style="border-top:0px; border-right:0px; border-left:0px; border-bottom-width:thick; border-radius:0px;color:black;">Open(@Model.openTicketsCount)</label>

                          <input type="radio" class="btn-check" name="btnradio" id="btnradio3"  autocomplete="off">
                          <label class="btn statusCriteriaButton" for="btnradio3" id="inprogressStatusRadio"
                            style="border-top:0px; border-right:0px; border-left:0px; border-bottom-width:thick; border-radius:0px;color:black;">In Progress(@Model.inProgressTicketsCount)</label>

                          <input type="radio" class="btn-check" name="btnradio" id="btnradio4"  autocomplete="off">
                          <label class="btn statusCriteriaButton" for="btnradio4" id="closedStatusRadio"
                            style="border-top:0px; border-right:0px; border-left:0px; border-bottom-width:thick; border-radius:0px;color:black;">Closed(@Model.closedTicketsCount)</label>
                       </div>
                    </div>
                    <div class="col-md-8 col-sm-12" style="margin-right: 0px; margin-left: 0px; padding-right: 0px; padding-left: 0px;">
                        <div class="row" style="justify-content: flex-end;">
                              <div class="search-container">
                                <input class="search" id="invoiceNumberSelection" type="search" name="q" placeholder="Search">
                                <button class="btn searchbutton" for="searchright" onclick="toggleSearch()"><img src="../assets/images/dashboard/glass-icon.png"/></button>
                              </div>
                              <button class="btn filtering" onclick="filtermodal()"><i class="fa fa-filter"></i> Filters</button>
                          </div>
                        </div>
                    </div>
                  </div>

                <div class="row" style="width:100%">
                      <div id="filters-div" class="justify-content-between align-items-center mt-2 mx-2">
                            <div class="clear-allfilters">
                                <label>Selected Filters</label>
                                <a href="#" id="clearAllFilters" class="clear-all-link">Clear All</a>
                            </div>
                            <div id="filterSelections"></div>
                      </div>
                </div>

            </div>
          </div>
    </div>

                <div class="card-body" style="padding-left:0px; padding-right:0px; padding-top:0px;">
                    <div class="table-responsive">
                        <table id="file-datatable" class="table table-bordered text-nowrap key-buttons border-bottom">
                            <thead>
                                <tr>
                                    <th class="border-bottom-0">Ticket No.</th>
                                    <th class="border-bottom-0">Account No.</th>
                                    <th class="border-bottom-0">Account Name</th>
                                    <th class="border-bottom-0">Instrument</th>
                                    <th class="border-bottom-0">Issue Type</th>
                                    <th class="border-bottom-0">Created On</th>
                                    <th class="border-bottom-0">Status</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                              @foreach(var item in Model.tickets)
                                {
                                  <tr data-StatusAttribute="@item.Status" data-InstrumentTypeAttribute="@item.InstumentType" data-IssueTypeAttribute="@item.IssueType" data-CreatedDateAttribute="@item.TicketDate.Value.ToShortDateString()" data-day="@item.TicketDate.Value.Day" data-month="@item.TicketDate.Value.Month" data-year="@item.TicketDate.Value.Year">
                                    <td  style="color: var(--primary-purple); text-align: left; font: normal normal 600 14px/12px Inter; letter-spacing: 0px; color: #3F058F; opacity: 1;">@item.Id</td>
                                    <td>@item.Account.AccountNumber</td>
                                    <td>@item.Account.AccountName</td>
                                    <td style="color: var(--black); text-align: left; font: normal normal bold 14px/16px Inter; letter-spacing: 0px; color: #191616; opacity: 1;">@item.InstumentType</td>
                                    <td>@item.IssueType</td>
                                    <td>@item.TicketDate.Value.ToString("dd MMM, yyyy")</td>
                                    @if(item.Status == "Closed")
                                    {
                                        <td style="text-align:center"><span class="badge rounded-pill bg-success"  style="top: 713px; left: 1114px; width: 110px; height: 24px; /* UI Properties */ background: transparent linear-gradient(265deg, #3DA79C 0%, #3BC8B9 100%) 0% 0% no-repeat padding-box; border-radius: 6px; opacity: 1; font-size:small; width:100px !important">@item.Status</span></td>
                                    }
                                    else if(item.Status == "Open")
                                    {
                                        <td style="text-align:center"><span class="badge rounded-pill bg-danger" style=" top: 406px;
                                        left: 1114px;
                                        width: 110px;
                                        height: 24px;
                                        /* UI Properties */
                                        background: transparent linear-gradient(265deg, #C15555 0%, #F47356 100%) 0% 0% no-repeat padding-box;
                                        border-radius: 6px;
                                        opacity: 1;
                                        font-size:small; width:100px !important">@item.Status</span></td>
                                    }
                                    else
                                    {
                                        <td style="text-align:center"><span class="badge rounded-pill text-dark"  style="top: 470px;
                                        left: 1114px;
                                        width: 110px;
                                        height: 24px;
                                        /* UI Properties */
                                        background: transparent linear-gradient(90deg, #F8BB46 0%, #E59806 100%) 0% 0% no-repeat padding-box;
                                        border-radius: 6px;
                                        opacity: 1; font-size:small; width:100px !important">@item.Status</span></td>    
                                    }
                                    <td style="color: var(--primary-purple);
                                      text-align: centre;
                                      font: normal normal bold 12px/44px Inter;
                                      letter-spacing: 0px;
                                      color: #3F058F;
                                      opacity: 1;">
                                    @Html.ActionLink("View Details", "TicketDetail", "Ticket", new { ticketId = @item.Id }, new { @class = "text-primary ms-1" })
                                <span>
                                    <img src="../../assets/images/arrow-circle-right-solid.svg" alt="Arrow Icon">
                                </span>
                            </td>
                            </tr> 
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- End Row -->

                       
</div>
<!-- CONTAINER CLOSED -->

<!--filter modal -->
<div class="modal fade" id="testModalCenter2" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered  modal-lg" role="document">
        <div class="modal-content">
          <button onclick="closeModal(this)" type="button" class="close" aria-label="Close" style="z-index:1999; position: absolute;top: 10px;right: 10px;border: none;color: #9398A5;background: #F5F6FA 0% 0% no-repeat padding-box;height: 30px;width: 30px;border-radius: 50px;font-size: 19px;">
            &times;
          </button>
            <div class="modal-body">
              <div class="container">
                  <div class="row">
                      <h1>Filters</h1>
                  </div>
                 <form id="filterForm">
                      <div class="row mb-3">
                          <div class="panel" id="datePanel">
                              <div class="row mb-3">
                                  <div class="col-md-6">
                                      <label class="form-label">Min Invoice Date</label>
                                      <input class="form-control" type="date" id="minDateSelection" />
                                  </div>
                                  <div class="col-md-6">
                                      <label class="form-label">Max Invoice Date</label>
                                      <input class="form-control" type="date" id="maxDateSelection" />
                                  </div>
                              </div>
                              <div class="row">
                                  <div class="col-md-6">
                                      <label class="form-label">Instrument Type</label>
                                      <select class="form-select" id="instrumenttype">
                                          <option value="">Select Instrument Type</option>
                                          <option value="Invoice">Invoice</option>
                                          <option value="Receipt">Receipt</option>
                                          <option value="Statement">Statement</option>
                                      </select>
                                  </div>
                                  <div class="col-md-6">
                                      <label class="form-label">Issue Type</label>
                                      <select class="form-select" id="issuetype">
                                          <option value="">Select Issue Type</option>
                                          <option value="Complain">Complain</option>
                                          <option value="Dispute">Dispute</option>
                                          <option value="Feedback">Feedback</option>
                                      </select>
                                  </div>
                              </div>
                          </div>
                      </div>
                      <div class="row mt-5">
                          <div class="col-md-12 text-center">
                              <button type="submit" id="applyFilterButton" class="btn" style="width:100%;">Apply Filter</button>
                          </div>
                      </div>
                  </form>
              </div>
          </div>


        </div>
    </div>
</div>


<style>
         .custom-file-input {
            position: relative;
            overflow: hidden;
            margin: 0;
            font-size: 16px;
        }
        .custom-file-input input {
            position: absolute;
            top: 0;
            right: 0;
            margin: 0;
            padding: 0;
            font-size: 30px;
            cursor: pointer;
            opacity: 0;
            filter: alpha(opacity=0);
        }
        .custom-file-input button {
            display: inline-block;
            padding: 10px 20px;
            width: 100%;
            height: 100px;
            cursor: pointer;
            background-color: rgba(219, 219, 219, 0.349);
            color: white;
            border: 1px dashed rgb(129, 129, 129);
            border-radius: 5px;
        }
        .upload-file1 {
            color: var(--unnamed-color-3b444d);
            text-align: left;
            font: normal normal 600 14px/19px Inter;
            letter-spacing: 0px;
            color: #3B444D;
            opacity: 1;
        }
        .upload-file2 {
            color: var(--grey);
            text-align: left;
            font: italic normal normal 12px/16px Inter;
            letter-spacing: 0px;
            color: #9398A5;
            opacity: 1;
        }
        .button {
          display: inline-block;
          margin: 4px 2px;
          background-color: #444;
          font-size: 14px;
          padding-left: 32px;
          padding-right: 32px;
          height: 50px;
          line-height: 50px;
          text-align: center;
          color: white;
          text-decoration: none;
          cursor: pointer;
          -moz-user-select: none;
          -khtml-user-select: none;
          -webkit-user-select: none;
          -ms-user-select: none;
          user-select: none;
        }
</style>

<script>
 function closeModal(btn) {
  // Find the closest modal
  var modal = $(btn).closest('.modal');
  console.log("Button clicked:", btn); // Log the button element
  console.log("Modal found:", modal); // Log the modal element
   $('#file-datatable').find('input[type="checkbox"]').prop('checked', false);
  // Close the found modal
  $(modal).modal('hide');
}


$(document).on("click", ".statusCriteriaButton", function (event) {
  console.log(event);
  if (event.target.id == "allStatusRadio") {
    statusCriteria = "all";
  } else if (event.target.id == "openStatusRadio") {
    statusCriteria = "Open";
  } else if (event.target.id == "inprogressStatusRadio") {
    statusCriteria = "Inprogress";
  } else if (event.target.id == "closedStatusRadio") {
    statusCriteria = "Closed";
  }
  // Log statusCriteria to verify the selected status
  console.log("Selected Status Criteria:", statusCriteria);

  var table = $('#file-datatable').DataTable();
  console.log(table.rows().data().toArray());
  table.draw();
});

function updateFileName(input) {
    var fileName = input.files[0].name;
    document.getElementById('fileName').innerText = 'Selected file: ' + fileName;
}

function toggleSearch() {
  var searchContainer = document.querySelector('.search-container');
  var searchInput = document.querySelector('.search');
        
  // Toggle the 'expanded' class
  searchContainer.classList.toggle('expanded');
      
  // If expanded, focus on the search input
  if (searchContainer.classList.contains('expanded')) {
    searchInput.focus();
  }
}
</script>


