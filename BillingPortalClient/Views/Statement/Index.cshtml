@using System.Text.Json
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = "_Layout";
}
@model BillingPortalClient.ModelViews.StatementViewModel

 <!-- CONTAINER -->
<div class="main-container container-fluid" style="margin-top:1%; padding-left:0; padding-right:0;">

                    


    <!-- ROW-1 -->
    <div class="row widget-row">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xl-12">
            <div class="row">
                <div class="card-widget">
                    <div class="card overflow-hidden">
                        <div class="card-body c1">
                            <div class="d-flex">
                                <div class="">
                                <img src="../assets/images/dashboard/flow-icon-purple.png" />
                                    <h6 class="text title"> All <br />Transactions</h6>
                                    <h2 class="mb-0 number-font text">@Model.allTransactionCount</h2>
                                </div>
                               
                            </div>
                            <span class="text-muted fs-12">
                                <a href="@Url.Action("RefreshCustomerStatements","Statement")" class="btn btn-primary mt-2"><i class="fe fe-refresh-cw"></i> Refresh </a>
                              </span>
                        </div>
                    </div>
                </div>
                <div class="card-widget">
                    <div class="card overflow-hidden">
                        <div class="card-body c3">
                            <div class="d-flex">
                                <div class="">
                                <img src="../assets/images/dashboard/coin-icon-orange.png" />
                                    <h6 class="text title">Debit <br />Amount</h6>
                                    <h2 class="mb-0 number-font text">SAR @Model.debitAmountTotal</h2>
                                </div>
                               
                            </div>
                            <span class="text-muted fs-12">
                                <a href="@Url.Action("RefreshCustomerStatements","Statement")" class="btn btn-primary mt-2"><i class="fe fe-refresh-cw"></i> Refresh </a>
                              </span>
                        </div>
                    </div>
                </div>
                <div class="card-widget">
                    <div class="card overflow-hidden">
                        <div class="card-body c4">
                            <div class="d-flex">
                                <div class="">
                                <img src="../assets/images/dashboard/coins-icon-green.png" />
                                    <h6 class="text title">Credit <br />Amount</h6>
                                    <h2 class="mb-0 number-font text">SAR @Model.creditAmountTotal</h2>
                                </div>
                               
                            </div>
                            <span class="text-muted fs-12">
                                <a href="@Url.Action("RefreshCustomerStatements","Statement")" class="btn btn-primary mt-2"><i class="fe fe-refresh-cw"></i> Refresh </a>
                              </span>
                        </div>
                    </div>
                </div>
              
            </div>
        </div>
    </div>
    <!-- ROW-1 END -->



    <!-- Row -->
   <div class="row row-sm">
    <div class="col-lg-12">
      <div class="card">
        <div class="card-header" style="padding: 0px;border-bottom:none;display: block;">
          <div class="row" style="width:100%;">
            <div class="col-md-7 col-sm-12">
              <h5 class="card-title text black">Showing details of @Model.accountName</h5>
              <h5 class="card-sub-title text"><span>Account No: </span><span class="orange">@Model.accountNumber</span>
              </h5>
            </div>
            <div class="col-md-2 col-sm-12 search-container right" style="text-align:right; position: relative; right: 40px;">
                                <input class="search expandright" id="transactionNumberSelection" type="search" name="q" placeholder="Search">
                                <button class="btn searchbutton" for="searchright" onclick="toggleSearch()"><img src="../assets/images/dashboard/glass.png" /></button>
            </div>
            <div class="col-md-2 col-sm-6">
              <div class="row filters-bar">

                <div class="col-md-6" style="float: left; text-align: center;">
                  <button class="btn filtering" onclick="filtermodal()"><i class="fa fa-filter"></i> Filters</button>
                </div>

                <div class="col-md-6" style="float: left; text-align: center;">
                  <div class="btn-export" id="exportButtonsDiv"></div>
                </div>

              </div>
            </div>

          </div>
        </div>
         <div class="row" style="width:100%">
                        <div id="filters-div" class="justify-content-between align-items-center mt-2 mx-2">
                            <div class="clear-allfilters">
                                <label>Selected Filters</label>
                                <a href="#" id="clearAllFilters" class="clear-all-link">Clear All</a>
                            </div>
                            <div id="filterSelections"></div>
                         </div>
                    </div>
        <div class="card-body" style="padding-left:0px; padding-right:0px; padding-top:0px;">

                    <div class="table-responsive">
                        <table id="file-datatable" class="table table-bordered text-nowrap key-buttons border-bottom">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th class="border-bottom-0">Ref No.</th>
                                    <th class="border-bottom-0">Doc No.</th>
                                    <th class="border-bottom-0">Account No.</th>
                                    <th class="border-bottom-0">Region</th>
                                    <th class="border-bottom-0">Date</th>
                                    <th class="border-bottom-0">Type</th>
                                    <th class="border-bottom-0">Debit</th>
                                    <th class="border-bottom-0">Credit</th>
                                    <th class="border-bottom-0">Balance</th>
                                    <th class="border-bottom-0">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                              @foreach(var item in Model.statementRows)
                                {
                                  <tr id="@string.Format("tr{0}",item.id)" data-InstrumentTypeAttribute="@item.type" data-day="@item.createdDate.Day" data-month="@item.createdDate.Month" data-year="@item.createdDate.Year">
                                    <td><input type="checkbox" id="@string.Format("{0}",item.id)" class="receiptsTableCheckbox"/></td>
                                    <td><strong>@item.refNo</strong></td>
                                    <td>@item.docNumber</td>
                                    <td>@item.accountNumber</td>
                                    <td>@item.region</td>
                                    <td>@item.createdDate.ToString("dd MMM, yyyy")</td>
                                     @if(@item.type == "Invoice")
                                      {
                                          <td style="text-align:center"><span class="badge rounded-pill bg-success"  style="font-size:small; width:60px">@item.type</span></td>
                                      }
                                      else if(@item.type == "Paymemt")
                                      {
                                          <td style="text-align:center"><span class="badge rounded-pill bg-danger" style="font-size:small; width:60px">@item.type</span></td>
                                      }
                                      else
                                      {
                                          <td style="text-align:center"><span class="badge rounded-pill bg-warning"  style="font-size:small; width:60px">@item.type</span></td>
                                      }
                                   
                                   @if(item.debit == 0){
                                       <td></td>
                                    }else{
                                       <td style="color: #C95955;">@item.debit</td>
                                    }

                                     @if(item.credit == 0){
                                       <td></td>
                                    }else{
                                       <td style="color: #3BC4B6;">@item.credit</td>
                                    }
                                    <td><strong>@item.balance</strong> SAR</td>
                                    <td>
                                      <button type="button" class="btn btn-primary btn-download statementPrintRowButton" 
                                        data-itemId=@item.id
                                        data-refNo=@item.refNo
                                        data-docNumber=@item.docNumber
                                        data-createDate=@item.createdDate.ToShortDateString()
                                        data-type=@item.type
                                        data-debit=@item.debit
                                        data-credit=@item.credit
                                        data-balance=@item.balance
                                      ><i class="fe fe-file-text"></i></button>


                                      <button data-itemId=@item.id type="button" class="btn btn-success btn-pay ticketModalButton"><i class="fe fe-credit-card"></i></button>
                                    </td>
                                  </tr>
                                }
                                
                                
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- End Row -->

                       
</div>
<!-- CONTAINER CLOSED -->

<div class="modal fade" id="testModalCenter1"  role="dialog"  aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered  modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <div class="container">
          <h1>Create Ticket</h1>
          <h5>Enter the details below to create a ticket.</h5>
          <form asp-controller="Ticket" asp-action="SaveTicket" method="post">
            <div class="row mb-3">
              <div class="col-md-6">
      	        <label style="font-weight:bold">Instrument Type<span style="color:red; margin-left:2px">*</span></label>
                <select asp-for="ticketViewModel.instrumentType" class="form-select" aria-label="Default select example">
                  <option value="Statement" selected>Statement</option>
                </select>
              </div>
      
              <div class="col-md-6">
      	        <label style="font-weight:bold">Issue Type<span style="color:red; margin-left:2px">*</span></label>
                <select asp-for="ticketViewModel.issueType" class="form-select" aria-label="Default select example">
                  <option value="Complain" selected>Complain</option>
                  <option value="Dispute">Dispute</option>
                  <option value="Feedback">Feedback</option>
                </select>
              </div>
      
            </div>
    
            <div class="row mb-3">
    	        <div class="col-md-12">
        	        <label style="font-weight:bold">Instrument Number<span style="color:red; margin-left:2px;">*</span></label>
        	            <select asp-for="ticketViewModel.instrumentNumbers" required id="ticketViewModel_instrumentNumbers" multiple class="form-select" >
                      </select>
                </div>
            </div>
    
            <div class="row mb-3">
    	        <div class="col-md-12">
        	        <label  style="font-weight:bold">Description<span style="color:red; margin-left:2px;">*</span></label>
        	        <textarea asp-for="ticketViewModel.description" required placeholder="Give a description of your ticket" class="form-control" id="exampleFormControlTextarea1" rows="2"></textarea>
                </div>
            </div>
    
            <div class="row mb-3">
    	        <div class="col-md-12">
        	        <label  style="font-weight:bold">Upload Image</label><br>
        	        <input type="file" id="myFile" name="filename" class="btn btn-primary">
            
                </div>
            </div>
            <div class="row">
              <div class="col-md-4">

              </div>
              <div class="col-md-4">
                <button type="submit" class="btn btn-primary" style="width:100%;">Submit</button>

              </div>
              <div class="col-md-4">

              </div>

            </div>
          </form>
        </div>

      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="testModalCenter2" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle1"
  aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered  modal-lg" role="document">
    <div class="modal-content">

      <div class="modal-body">

        <div class="container">
          <div class="row">
            <h1>Filters</h1>
          </div>

          <form id="filterForm">
            <div class="row mb-3">
              <div class="panel" id="datePanel">
                <div class="row mb-5">
                  <div class="col-md-12">
                    <label style="text-align:left; float:left;">Transaction Date</label>
                  </div>

                  <div class="col-md-6">
                    <input class="form-control" type="date" id="minDateSelection" onchange="mDateOnChange()" />
                  </div>
                  <div class="col-md-6">
                    <input class="form-control" type="date" id="maxDateSelection" onchange="mDateOnChange()" />
                  </div>
                </div>
              </div>

              <div class="panel" id="transactionNumberPanel">
                <div class="row mb-5">
                  <div class="col-md-12">
                   <label style="text-align:left; width:100%;">Transaction Type</label>
                                                  <span>
                                                      <input type="radio"  class="form-control" name="paymentMode" myid="payment" value="Payment">
                                                      <label>Payment</label>
                                                  </span>
                                                  <span>
                                                      <input type="radio"  class="form-control" name="paymentMode" myid="invoice" value="Invoice">
                                                      <label>Invoice</label>
                                                  </span>
                  </div>
                </div>
              </div>
            </div>

            <div class="row">
              <div class="col-md-12 text-center">
                <button type="submit" id="applyFilterButton" class="btn" style="width:100%;">Apply Filter</button>
              </div>
            </div>
          </form>

        </div>

      </div>

    </div>
  </div>
</div>

<script>

// let selectedRows = [];
  let selectedFilters = [];

  var filterData = {
    name: getFilterName(),
    value: getFilterValue()
};

  var model = @Html.Raw(JsonSerializer.Serialize(Model));
  console.log({model})

  $("#minDateSelection").val("");
  $("#maxDateSelection").val("");
  $('input[name="paymentMode"]:checked').prop('checkedd', false);

    var statusCriteria = "all";

    $(document).ready(function () {
        console.log('*******************************************');

        $("#ticketViewModel_instrumentNumbers").select2({
          width: '100%',
          templateResult:null,
          tags:true,
        })

    }); 

     if (!$.fn.DataTable.isDataTable('#file-datatable')) {
        table = $("#file-datatable").DataTable({
            // ... (your existing DataTable configuration)
            drawCallback: function () {
                var minInvoiceDate = new Date($("#minDateSelection").val());
                var maxInvoiceDate = new Date($("#maxDateSelection").val());
                var transactionNumberFilter = $("#transactionNumberSelection").val().toLowerCase();
                var selectedPaymentMode= $('input[name="paymentMode"]:checked').attr('myid');
                console.log("selectedPaymentMode",selectedPaymentMode);
                this.api().rows().every(function (rowIdx, tableLoop, rowLoop) {
                    var data = this.data();
                    var transactionNumber = data[2].toLowerCase();
                    var invoiceDate = new Date(data[5]);
                    // Assuming data[4] contains the HTML string
                    var paymentModeHTML = data[6].toLowerCase();

                    // Create a temporary element to parse the HTML
                    var tempElement = $('<div>').html(paymentModeHTML);

                    // Extract the text content
                    var paymentMode = tempElement.text().toLowerCase();
                    console.log("paymentMode", paymentMode);
                    if (
                        (!isNaN(minInvoiceDate) && invoiceDate < minInvoiceDate) ||
                        (!isNaN(maxInvoiceDate) && invoiceDate > maxInvoiceDate) ||
                        (transactionNumber !== '' && !transactionNumber.includes(transactionNumberFilter))  ||
                        (selectedPaymentMode !== undefined && paymentMode !== selectedPaymentMode)
                    ) {
                        $(this.node()).css("display", "none");
                    } else {
                        $(this.node()).css("display", "");
                    }
                });
            },
        });
    }

  $("#minDateSelection, #maxDateSelection").on("change", function () {

  });

  $("#filterForm").on("submit", function (event) {
        event.preventDefault();
        $("#filters-div").show();
        displaySelectedFilters();
        if (table) {
            table.rows().invalidate().draw();
            table.page('first').draw('page');
        } else {
            console.log("Table is not defined");
        }
        $("#testModalCenter2").modal("hide");
  });

  $("#transactionNumberSelection").on("keyup", function () {
        if (table) {
            table.rows().invalidate().draw();
            table.page('first').draw('page');
        } else {
            console.log("Table is not defined");
        }
  });

  $("#clearAllFilters").on("click", function (e) {
		// Clear the form first
		$("#testModalCenter2 #filterForm")[0].reset();
		// Then clear selectedFilters
		selectedFilters = [];
		// Finally, display selected filters and redraw the DataTable
		displaySelectedFilters();
		table.draw(); // Clear DataTable
		table.page('first').draw('page');
		$("#filters-div").hide();
		e.preventDefault();
	});
 
 function filtermodal() {
    // Show the filter modal (replace with your actual modal code)
    $("#testModalCenter2").modal('show');
    
  }  

// Function to determine the label based on the selected filters
function getFilterName() {
   var paymentModeChecked = $('input[name="paymentMode"]:checked');
    // Check the selected filter criteria and set the label accordingly
    if ($("#minDateSelection").val() || $("#maxDateSelection").val()) {
        return "Transaction Date";
    } else if (paymentModeChecked.length > 0) {
        return "Transaction Type";
    }
    // Return an empty string if no specific filter is applied
    return "";
}


function formatDate(inputDate) {
    const date = new Date(inputDate);
    const day = date.getDate();
    const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    const month = monthNames[date.getMonth()];
    const year = date.getFullYear();

    const formattedDate = `${day}${ordinalSuffix(day)} ${month} ${year}`;
    return formattedDate;
}

function ordinalSuffix(day) {
    if (day >= 11 && day <= 13) {
        return 'th';
    }
    switch (day % 10) {
        case 1:
            return 'st';
        case 2:
            return 'nd';
        case 3:
            return 'rd';
        default:
            return 'th';
    }
}

function getFilterValue(filterName) {
    var minDate = $("#minDateSelection").val();
    var maxDate = $("#maxDateSelection").val();
    var transactionNumber = $("#transactionNumberSelection").val();
     var paymentMode = $('input[name="paymentMode"]:checked').attr('myid');

    // Construct the filter value based on the selected filter name
    switch (filterName) {
        case "Transaction Date":
           return minDate && maxDate ? `From: ${formatDate(minDate)} To ${formatDate(maxDate)}` : null;
         case "Transaction Type":
            return paymentMode ? `${paymentMode}` : null;
        default:
            return null;
    }
}

function displaySelectedFilters() {
    var filterSelections = $("#filterSelections");
    var filterLabel = $("#filterLabel");

    // Clear previous filter selections
    filterSelections.empty();

    // Get values from the modal input fields
    var minDate = $("#minDateSelection").val();
    var maxDate = $("#maxDateSelection").val();
    var transactionNumber = $("#transactionNumberSelection").val();
    var paymentMode = $('input[name="paymentMode"]:checked').attr('myid');

    // Check if at least one filter value is provided
    if (minDate || maxDate || paymentMode) {
        filterLabel.show();

        // Create a div for each selected filter
        var filterNames = ["Transaction Date", "Transaction Type"];

        filterNames.forEach(function (filterName) {
            var filterValue = getFilterValue(filterName);

            if (filterValue) {
                var filterDiv = $("<div>", {
                    class: "filter-selection",
                });

                // Create a label for filter name only if filter value is not null or empty
                var filterNameLabel = $("<label>", {
                    class: "filter-label",
                    text: filterName + ": ",
                });

                // Create a span for filter value
                var filterValueSpan = $("<span>", {
                    class: "filter-value",
                    text: filterValue,
                });

               // Create a cross icon to remove the filter
                var crossIcon = $("<i>", {
                    class: "fa fa-times cross-icon",
                }).on("click", function () {
                   console.log("Clicked on cross icon");
                    // Remove the filter div
                    filterDiv.remove();
                   

                   // Get the filter name from the parent filter selection
                   var clickedFilterName = $(this).siblings('.filter-label').text().replace(": ", "").trim();
                   console.log("Clicked on cross icon for filter:", clickedFilterName);

                   // Remove the filter div
                   let currentbox = $(this).closest('.filter-selection');
                    console.log("Clicked on cross icon for currentbox:", currentbox);
                   currentbox.remove();

                   console.log("Clicked on cross icon for cfilter name:", filterName);

                  // Clear the corresponding modal input fields based on the filter type
                  switch (filterName) {
                      case "Transaction Date":
                          $("#minDateSelection, #maxDateSelection").val("");
                          break;
                       case "Transaction Type":
                          $('input[name="paymentMode"]').prop('checked', false);
                          break;
                      default:
                          break;
                  }
                  
                   // Remove the filter and update the display
                    selectedFilters = selectedFilters.filter((item) => item.name !== filterName);
                  
                    // selectedFilters = selectedFilters.filter((item) => item.name !== clickedFilterName);
                    console.log("Updated selectedFilters after removal: ", selectedFilters);

                    // Check if displaySelectedFilters is being called
                    displaySelectedFilters();

                    if (table) {
                        table.rows().invalidate().draw();
                        table.page('first').draw('page');
                    } else {
                        console.log("Table is not defined");
                    }
                });


                // Append elements to the filterDiv
                filterDiv.append(filterNameLabel).append(filterValueSpan).append(crossIcon);

                // Append the filterDiv to filterSelections
                filterSelections.append(filterDiv);
            }
        });
        // Show the filterSelections container
        filterSelections.show();
    } else {
        // If no filters are selected, hide the filter selections container
        filterLabel.hide();
        filterSelections.hide();
        // Hide Filter Div
			$("#filters-div").hide();
    }
}

if (table != undefined && table != null) {
    table.destroy();
}

var selectedRows = [];

function mDateOnChange()
{
 // var table = $('#file-datatable').DataTable();
 // table.draw();
}
// Handle checkbox clicks
$(document).on("change", ".transactionsTableCheckbox", function () {
  var docNumber = $(this).closest("tr").attr("data-docNumber");
    console.log(docNumber);
  if ($(this).prop("checked")) {
    // If checkbox is checked, add the document number to the array
    selectedRows.push(docNumber);
  } else {
    // If checkbox is unchecked, remove the document number from the array
    var index = selectedRows.indexOf(docNumber);
    if (index !== -1) {
      selectedRows.splice(index, 1);
    }
  }
});

  function addReceiptsForTicket() {
 
    if (selectedRows.length > 0) {
      selectedRows.forEach(row => {
        var data = {

          value: row,
          text: row,

        };

        var newOption = new Option(data.text, data.value, true, true);
        $('#ticketViewModel_instrumentNumbers').append(newOption).trigger('change');
      })
      $("#testModalCenter1").modal('show');
    }
    else {
      alert('Kindly select a payment transation.')
    }

  }

    function toggleSearch() {
        var searchContainer = document.querySelector('.search-container');
        var searchInput = document.querySelector('.search');
        
        // Toggle the 'expanded' class
        searchContainer.classList.toggle('expanded');
        
        // If expanded, focus on the search input
        if (searchContainer.classList.contains('expanded')) {
            searchInput.focus();
        }
    }


  $(document).on("click",".ticketModalButton",function(e){

    var id = this.dataset.itemid;

    var data = {
      value: id,
      text: id,
    };


    var newOption = new Option(data.text, data.value, true, true);
    $('#ticketViewModel_instrumentNumbers').append(newOption).trigger('change');

    $("#testModalCenter1").modal('show');
  
  });


</script>
